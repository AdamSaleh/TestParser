<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="0" total="526" passed="526">
  <reporter-output>
    <line>
      <![CDATA[IN THE REPORTER: param1]]>
    </line>
    <line>
      <![CDATA[IN THE REPORTER: param2]]>
    </line>
    <line>
      <![CDATA[Child.test3]]>
    </line>
    <line>
      <![CDATA[beforeSuite]]>
    </line>
    <line>
      <![CDATA[beforeTest]]>
    </line>
    <line>
      <![CDATA[beforeTestClass]]>
    </line>
    <line>
      <![CDATA[beforeTestMethod]]>
    </line>
    <line>
      <![CDATA[Child.test1]]>
    </line>
    <line>
      <![CDATA[beforeTestMethod]]>
    </line>
    <line>
      <![CDATA[Child.test3]]>
    </line>
    <line>
      <![CDATA[foo]]>
    </line>
    <line>
      <![CDATA[foo]]>
    </line>
    <line>
      <![CDATA[BEFORE]]>
    </line>
    <line>
      <![CDATA[output from hook test.verify]]>
    </line>
  </reporter-output>
  <suite name="TestNG Running Junit Tests" duration-ms="14" started-at="2011-05-26T14:44:20Z" finished-at="2011-05-26T14:44:20Z">
    <groups>
    </groups>
    <test name="Junit via TestNG XML" duration-ms="14" started-at="2011-05-26T14:44:20Z" finished-at="2011-05-26T14:44:20Z">
      <class name="test.junit.SetNameTest">
        <test-method status="PASS" signature="testFoo()" name="testFoo on instance testFoo(test.junit.SetNameTest)" duration-ms="3" started-at="2011-05-26T14:44:20Z" finished-at="2011-05-26T14:44:20Z">
        </test-method>
        <test-method status="PASS" signature="testBar()" name="testBar on instance testBar(test.junit.SetNameTest)" duration-ms="1" started-at="2011-05-26T14:44:20Z" finished-at="2011-05-26T14:44:20Z">
        </test-method>
      </class>
    </test>
  </suite>
  <suite name="TestNG" duration-ms="24849" started-at="2011-05-26T14:44:20Z" finished-at="2011-05-26T14:44:45Z">
    <groups>
      <group name="A">
        <method signature="test.configuration.ConfigurationGroups7SampleTest.testSomething()" name="testSomething" class="test.configuration.ConfigurationGroups7SampleTest"/>
        <method signature="test.configuration.ConfigurationGroups7SampleTest.testSomethingMore()" name="testSomethingMore" class="test.configuration.ConfigurationGroups7SampleTest"/>
        <method signature="test.configuration.ConfigurationGroups8SampleTest.testSomething()" name="testSomething" class="test.configuration.ConfigurationGroups8SampleTest"/>
        <method signature="test.configuration.ConfigurationGroups8SampleTest.testSomethingMore()" name="testSomethingMore" class="test.configuration.ConfigurationGroups8SampleTest"/>
      </group>
      <group name="B">
        <method signature="test.configuration.ConfigurationGroups8SampleTest.verify()" name="verify" class="test.configuration.ConfigurationGroups8SampleTest"/>
      </group>
      <group name="before">
        <method signature="test.inheritance.DChild_2.test()" name="test" class="test.inheritance.DChild_2"/>
      </group>
      <group name="one">
        <method signature="test.dependent.SampleDependentMethods2.oneA()" name="oneA" class="test.dependent.SampleDependentMethods2"/>
        <method signature="test.dependent.SampleDependentMethods2.oneB()" name="oneB" class="test.dependent.SampleDependentMethods2"/>
      </group>
      <group name="foo">
        <method signature="test.configuration.MultipleBeforeGroupTest.test()" name="test" class="test.configuration.MultipleBeforeGroupTest"/>
        <method signature="test.configuration.MultipleBeforeGroupTest.verify()" name="verify" class="test.configuration.MultipleBeforeGroupTest"/>
      </group>
      <group name="singleString">
        <method signature="test.parameters.ParameterSample.testSingleString(java.lang.String)" name="testSingleString" class="test.parameters.ParameterSample"/>
      </group>
      <group name="outer-group">
        <method signature="test.sample.Scope.outerDeprecated(java.lang.String)" name="outerDeprecated" class="test.sample.Scope"/>
      </group>
      <group name="testMethodOnFactoryClass">
        <method signature="test.factory.FactoryInSeparateClass.checkSum()" name="checkSum" class="test.factory.FactoryInSeparateClass"/>
      </group>
      <group name="MyTest">
        <method signature="test.factory.MyTest.testMethod()" name="testMethod" class="test.factory.MyTest"/>
      </group>
      <group name="1.0">
        <method signature="test.dependent.OrderMethodTest.z_first0()" name="z_first0" class="test.dependent.OrderMethodTest"/>
      </group>
      <group name="current">
        <method signature="test.Test1.includedGroups()" name="includedGroups" class="test.Test1"/>
        <method signature="test.MethodTest.excludeMethodsOnly()" name="excludeMethodsOnly" class="test.MethodTest"/>
        <method signature="test.MethodTest.includeMethodsOnly()" name="includeMethodsOnly" class="test.MethodTest"/>
        <method signature="test.mannotation.MAnnotation2SampleTest.verifyTestEnabledInheritance()" name="verifyTestEnabledInheritance" class="test.mannotation.MAnnotation2SampleTest"/>
        <method signature="test.multiple.TestMultiple.multiple()" name="multiple" class="test.multiple.TestMultiple"/>
        <method signature="test.dataprovider.ClassTest.includeMethodsOnly()" name="includeMethodsOnly" class="test.dataprovider.ClassTest"/>
        <method signature="test.CommandLineTest.junitParsing()" name="junitParsing" class="test.CommandLineTest"/>
        <method signature="test.CommandLineTest.junitParsing2()" name="junitParsing2" class="test.CommandLineTest"/>
        <method signature="test.CommandLineTest.suiteNameOverride()" name="suiteNameOverride" class="test.CommandLineTest"/>
        <method signature="test.CommandLineTest.testNameOverride()" name="testNameOverride" class="test.CommandLineTest"/>
      </group>
      <group name="currentold">
        <method signature="test.Test1.logger()" name="logger" class="test.Test1"/>
      </group>
      <group name="group1">
        <method signature="test.Exclude.included1()" name="included1" class="test.Exclude"/>
        <method signature="test.Exclude.included2()" name="included2" class="test.Exclude"/>
        <method signature="test.configuration.ConfigurationInheritGroupsSampleTest.test1()" name="test1" class="test.configuration.ConfigurationInheritGroupsSampleTest"/>
      </group>
      <group name="group2">
        <method signature="test.Exclude.verify()" name="verify" class="test.Exclude"/>
      </group>
      <group name="cg34-a">
        <method signature="test.configuration.ConfigurationGroups3SampleTest.fa()" name="fa" class="test.configuration.ConfigurationGroups3SampleTest"/>
      </group>
      <group name="1.1">
        <method signature="test.dependent.OrderMethodTest.z_premiere1()" name="z_premiere1" class="test.dependent.OrderMethodTest"/>
      </group>
      <group name="inheritedTestMethod">
        <method signature="test.sample.BaseSampleInheritance.baseMethod()" name="baseMethod" class="test.sample.BaseSampleInheritance"/>
      </group>
      <group name="cg1-a">
        <method signature="test.configuration.ConfigurationGroups1SampleTest.fa()" name="fa" class="test.configuration.ConfigurationGroups1SampleTest"/>
      </group>
      <group name="maven-broken">
        <method signature="test.xml.XmlVerifyTest.handleInvalidXml()" name="handleInvalidXml" class="test.xml.XmlVerifyTest"/>
      </group>
      <group name="cg2-1">
        <method signature="test.configuration.ConfigurationGroups2SampleTest.f1()" name="f1" class="test.configuration.ConfigurationGroups2SampleTest"/>
        <method signature="test.configuration.ConfigurationGroups2SampleTest.g1()" name="g1" class="test.configuration.ConfigurationGroups2SampleTest"/>
      </group>
      <group name="nopackage">
        <method signature="NoPackageTest.test()" name="test" class="NoPackageTest"/>
      </group>
      <group name="b">
        <method signature="test.groupinvocation.DummyTest.testAB()" name="testAB" class="test.groupinvocation.DummyTest"/>
      </group>
      <group name="cg5-2">
        <method signature="test.configuration.ConfigurationGroups5SampleTest.run2()" name="run2" class="test.configuration.ConfigurationGroups5SampleTest"/>
      </group>
      <group name="sample1">
        <method signature="test.methods.SampleMethod1.shouldRun1()" name="shouldRun1" class="test.methods.SampleMethod1"/>
        <method signature="test.methods.SampleMethod1.shouldRun2()" name="shouldRun2" class="test.methods.SampleMethod1"/>
      </group>
      <group name="a">
        <method signature="test.regression.groupsordering.A.testA()" name="testA" class="test.regression.groupsordering.A"/>
        <method signature="test.regression.groupsordering.B.testB()" name="testB" class="test.regression.groupsordering.B"/>
        <method signature="test.groupinvocation.DummyTest.testA()" name="testA" class="test.groupinvocation.DummyTest"/>
        <method signature="test.groupinvocation.DummyTest.testAB()" name="testAB" class="test.groupinvocation.DummyTest"/>
      </group>
      <group name="cg5-1">
        <method signature="test.configuration.ConfigurationGroups5SampleTest.run1()" name="run1" class="test.configuration.ConfigurationGroups5SampleTest"/>
      </group>
      <group name="cg34-1">
        <method signature="test.configuration.ConfigurationGroups3SampleTest.f1()" name="f1" class="test.configuration.ConfigurationGroups3SampleTest"/>
      </group>
      <group name="cg4-1">
        <method signature="test.configuration.ConfigurationGroups4SampleTest.run()" name="run" class="test.configuration.ConfigurationGroups4SampleTest"/>
      </group>
      <group name="2.1">
        <method signature="test.dependent.OrderMethodTest.a_second1()" name="a_second1" class="test.dependent.OrderMethodTest"/>
      </group>
      <group name="2.0">
        <method signature="test.dependent.BaseOrderMethodTest.a_second0()" name="a_second0" class="test.dependent.BaseOrderMethodTest"/>
      </group>
      <group name="basic1">
        <method signature="test.sample.Basic1.basic1()" name="basic1" class="test.sample.Basic1"/>
      </group>
      <group name="3">
        <method signature="test.dependent.BaseOrderMethodTest.third0()" name="third0" class="test.dependent.BaseOrderMethodTest"/>
      </group>
      <group name="cg6-1">
        <method signature="test.configuration.ConfigurationGroups6SampleTest.run1()" name="run1" class="test.configuration.ConfigurationGroups6SampleTest"/>
        <method signature="test.configuration.ConfigurationGroups6SampleTest.run2()" name="run2" class="test.configuration.ConfigurationGroups6SampleTest"/>
      </group>
      <group name="unittest">
        <method signature="test.nested.GarfTest.testGarf()" name="testGarf" class="test.nested.GarfTest"/>
      </group>
      <group name="cg1-1">
        <method signature="test.configuration.ConfigurationGroups1SampleTest.f1()" name="f1" class="test.configuration.ConfigurationGroups1SampleTest"/>
      </group>
      <group name="inner-group">
        <method signature="test.sample.Scope.innerDeprecated(java.lang.String)" name="innerDeprecated" class="test.sample.Scope"/>
      </group>
      <group name="first">
        <method signature="test.classgroup.First.first1()" name="first1" class="test.classgroup.First"/>
        <method signature="test.classgroup.First.first2()" name="first2" class="test.classgroup.First"/>
        <method signature="test.factory.FactoryTest2.testInt()" name="testInt" class="test.factory.FactoryTest2"/>
        <method signature="test.factory.FactoryWithInstanceInfoTest2.testInt()" name="testInt" class="test.factory.FactoryWithInstanceInfoTest2"/>
      </group>
      <group name="cg2-a">
        <method signature="test.configuration.ConfigurationGroups2SampleTest.fa()" name="fa" class="test.configuration.ConfigurationGroups2SampleTest"/>
      </group>
    </groups>
    <test name="Ant-ClassFileResolution" duration-ms="1" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:44Z">
      <class name="test.ant.TestCommandLineArgs">
        <test-method status="PASS" signature="testDOSPathResolution()" name="testDOSPathResolution" duration-ms="1" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:44Z">
        </test-method>
        <test-method status="PASS" signature="testUnixPathResolution()" name="testUnixPathResolution" duration-ms="0" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:44Z">
        </test-method>
        <test-method status="PASS" signature="testPathResolution()" name="testPathResolution" duration-ms="0" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:44Z">
        </test-method>
      </class>
    </test>
    <test name="Method2" duration-ms="1" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
      <class name="test.methods.VerifyMethod1">
        <test-method status="PASS" signature="verify()" name="verify" duration-ms="0" depends-on-groups="sample1" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
        </test-method>
      </class>
      <class name="test.methods.SampleMethod1">
        <test-method status="PASS" signature="shouldRun2()" name="shouldRun2" duration-ms="0" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
        </test-method>
        <test-method status="PASS" signature="shouldRun1()" name="shouldRun1" duration-ms="0" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
        </test-method>
      </class>
    </test>
    <test name="Test inner scope" duration-ms="0" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
      <class name="test.sample.Scope">
        <test-method status="PASS" signature="innerDeprecated(java.lang.String)" name="innerDeprecated" duration-ms="0" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[in]]>
              </value>
            </param>
          </params>
        </test-method>
      </class>
    </test>
    <test name="MethodInterceptor" duration-ms="92" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:45Z">
      <class name="test.methodinterceptors.MethodInterceptorTest">
        <test-method status="PASS" signature="fastShouldNotRunFirst()" name="fastShouldNotRunFirst" duration-ms="3" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:44Z">
        </test-method>
        <test-method status="PASS" signature="fastShouldRunFirst()" name="fastShouldRunFirst" duration-ms="2" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:44Z">
        </test-method>
        <test-method status="PASS" signature="noMethodsShouldRun()" name="noMethodsShouldRun" duration-ms="2" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:44Z">
        </test-method>
        <test-method status="PASS" signature="nullMethodInterceptorWorksInTestngXml()" name="nullMethodInterceptorWorksInTestngXml" duration-ms="5" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:44Z">
        </test-method>
        <test-method status="PASS" signature="shouldNotLockUpWithInterceptorThatRemovesMethods()" name="shouldNotLockUpWithInterceptorThatRemovesMethods" duration-ms="79" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:45Z">
        </test-method>
      </class>
    </test>
    <test name="Method1" duration-ms="0" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
      <class name="test.methods.VerifyMethod1">
        <test-method status="PASS" signature="verify()" name="verify" duration-ms="0" depends-on-groups="sample1" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
        </test-method>
      </class>
      <class name="test.methods.SampleMethod1">
        <test-method status="PASS" signature="shouldRun2()" name="shouldRun2" duration-ms="0" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
        </test-method>
        <test-method status="PASS" signature="shouldRun1()" name="shouldRun1" duration-ms="0" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
        </test-method>
      </class>
    </test>
    <test name="AfterClassCalledAtEnd" duration-ms="1" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
      <class name="test.sample.AfterClassCalledAtEnd">
        <test-method status="PASS" signature="test3()" name="test3" duration-ms="0" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
        <test-method status="PASS" signature="before1Class()" name="before1Class" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
        <test-method status="PASS" signature="test1()" name="test1" duration-ms="0" started-at="2011-05-26T14:44:29Z" description="Verify that beforeClass and afterClass are called correctly" finished-at="2011-05-26T14:44:29Z">
        </test-method>
        <test-method status="PASS" signature="test2()" name="test2" duration-ms="0" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
        <test-method status="PASS" signature="afterClass()" name="afterClass" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
        <test-method status="PASS" signature="baseAfterClass()" name="baseAfterClass" is-config="true" duration-ms="0" depends-on-groups=".*" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
      </class>
    </test>
    <test name="Method3" duration-ms="1" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
      <class name="test.methods.VerifyMethod1">
        <test-method status="PASS" signature="verify()" name="verify" duration-ms="0" depends-on-groups="sample1" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
        </test-method>
      </class>
      <class name="test.methods.SampleMethod1">
        <test-method status="PASS" signature="shouldRun1()" name="shouldRun1" duration-ms="0" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
        </test-method>
        <test-method status="PASS" signature="shouldRun2()" name="shouldRun2" duration-ms="1" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
        </test-method>
      </class>
    </test>
    <test name="Injection" duration-ms="10" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
      <class name="test.inject.InjectDataProviderTest">
        <test-method status="PASS" signature="dpObject2(org.testng.ITestContext, java.lang.Integer, java.lang.String)" name="dpObject2" duration-ms="0" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.testng.TestRunner@23dd246]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[b]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="dpObject2(org.testng.ITestContext, java.lang.Integer, java.lang.String)" name="dpObject2" duration-ms="0" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.testng.TestRunner@23dd246]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[a]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="dpObject1(java.lang.Integer, org.testng.ITestContext, java.lang.String)" name="dpObject1" duration-ms="0" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[org.testng.TestRunner@23dd246]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[a]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="dpObject1(java.lang.Integer, org.testng.ITestContext, java.lang.String)" name="dpObject1" duration-ms="0" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[org.testng.TestRunner@23dd246]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[b]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="dpObject3(java.lang.Integer, java.lang.String, org.testng.ITestContext)" name="dpObject3" duration-ms="0" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[b]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@23dd246]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="dpObject3(java.lang.Integer, java.lang.String, org.testng.ITestContext)" name="dpObject3" duration-ms="0" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[a]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[org.testng.TestRunner@23dd246]]>
              </value>
            </param>
          </params>
        </test-method>
      </class>
      <class name="test.inject.InjectBeforeMethodTest">
        <test-method status="PASS" signature="after([Ljava.lang.Object;)" name="after" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@2d06fbd7]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="f(java.lang.String)" name="f" duration-ms="0" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[a]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="before([Ljava.lang.Object;)" name="before" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@2d06fbd7]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="after([Ljava.lang.Object;)" name="after" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@257ff759]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="f(java.lang.String)" name="f" duration-ms="0" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[b]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="before([Ljava.lang.Object;)" name="before" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Object;@257ff759]]>
              </value>
            </param>
          </params>
        </test-method>
      </class>
      <class name="test.inject.InjectTestResultTest">
        <test-method status="PASS" signature="verifyTestResultInjection()" name="verifyTestResultInjection" duration-ms="5" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
      </class>
      <class name="test.inject.NoInjectionTest">
        <test-method status="PASS" signature="withInjection(java.lang.reflect.Method)" name="withInjection" duration-ms="0" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void test.inject.NoInjectionTest.withInjection(java.lang.reflect.Method)]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="withoutInjection(java.lang.reflect.Method)" name="withoutInjection" duration-ms="0" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void test.inject.CC.f()]]>
              </value>
            </param>
          </params>
        </test-method>
      </class>
      <class name="test.inject.InjectTestContextTest">
        <test-method status="PASS" signature="injectionAndParameters(java.lang.String, org.testng.ITestContext)" name="injectionAndParameters" duration-ms="0" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Cedric]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[org.testng.TestRunner@23dd246]]>
              </value>
            </param>
          </params>
        </test-method>
      </class>
    </test>
    <test name="Regression2" duration-ms="8614" started-at="2011-05-26T14:44:20Z" finished-at="2011-05-26T14:44:29Z">
      <class name="test.mannotation.MAnnotationSampleTest">
        <test-method status="PASS" signature="verifyConfigurationAfter()" name="verifyConfigurationAfter" duration-ms="0" started-at="2011-05-26T14:44:21Z" finished-at="2011-05-26T14:44:21Z">
        </test-method>
        <test-method status="PASS" signature="init()" name="init" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:21Z" finished-at="2011-05-26T14:44:21Z">
        </test-method>
        <test-method status="PASS" signature="verifyDataProvider()" name="verifyDataProvider" duration-ms="0" started-at="2011-05-26T14:44:21Z" finished-at="2011-05-26T14:44:21Z">
        </test-method>
        <test-method status="PASS" signature="verifyConfigurationOthers()" name="verifyConfigurationOthers" duration-ms="0" started-at="2011-05-26T14:44:21Z" finished-at="2011-05-26T14:44:21Z">
        </test-method>
        <test-method status="PASS" signature="verifyConfigurationBefore()" name="verifyConfigurationBefore" duration-ms="0" started-at="2011-05-26T14:44:21Z" finished-at="2011-05-26T14:44:21Z">
        </test-method>
        <test-method status="PASS" signature="verifyParameters()" name="verifyParameters" duration-ms="1" started-at="2011-05-26T14:44:21Z" finished-at="2011-05-26T14:44:21Z">
        </test-method>
        <test-method status="PASS" signature="verifyNewConfigurationAfter()" name="verifyNewConfigurationAfter" duration-ms="0" started-at="2011-05-26T14:44:21Z" finished-at="2011-05-26T14:44:21Z">
        </test-method>
        <test-method status="PASS" signature="verifyNewConfigurationBefore()" name="verifyNewConfigurationBefore" duration-ms="0" started-at="2011-05-26T14:44:21Z" finished-at="2011-05-26T14:44:21Z">
        </test-method>
        <test-method status="PASS" signature="verifyExpectedExceptions()" name="verifyExpectedExceptions" duration-ms="0" started-at="2011-05-26T14:44:21Z" finished-at="2011-05-26T14:44:21Z">
        </test-method>
        <test-method status="PASS" signature="verifyFactory()" name="verifyFactory" duration-ms="0" started-at="2011-05-26T14:44:21Z" finished-at="2011-05-26T14:44:21Z">
        </test-method>
        <test-method status="PASS" signature="verifyTestMethodLevel()" name="verifyTestMethodLevel" duration-ms="1" started-at="2011-05-26T14:44:21Z" finished-at="2011-05-26T14:44:21Z">
        </test-method>
        <test-method status="PASS" signature="verifyTestClassLevel()" name="verifyTestClassLevel" duration-ms="0" started-at="2011-05-26T14:44:21Z" finished-at="2011-05-26T14:44:21Z">
        </test-method>
        <test-method status="PASS" signature="verifyTestConstructorLevel()" name="verifyTestConstructorLevel" duration-ms="0" started-at="2011-05-26T14:44:21Z" finished-at="2011-05-26T14:44:21Z">
        </test-method>
      </class>
      <class name="test.attributes.AttributeTest">
        <test-method status="PASS" signature="bc(org.testng.ITestContext)" name="bc" is-config="true" duration-ms="1" started-at="2011-05-26T14:44:20Z" finished-at="2011-05-26T14:44:20Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.testng.TestRunner@4c3fe94a]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="f1(org.testng.ITestContext)" name="f1" duration-ms="0" started-at="2011-05-26T14:44:20Z" finished-at="2011-05-26T14:44:20Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.testng.TestRunner@4c3fe94a]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="f2(org.testng.ITestContext)" name="f2" duration-ms="0" started-at="2011-05-26T14:44:20Z" depends-on-methods="test.attributes.AttributeTest.f1" finished-at="2011-05-26T14:44:20Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.testng.TestRunner@4c3fe94a]]>
              </value>
            </param>
          </params>
        </test-method>
      </class>
      <class name="test.thread.MultiThreadedDependentTest">
        <test-method status="PASS" signature="test2Threads()" name="test2Threads" duration-ms="14" started-at="2011-05-26T14:44:21Z" finished-at="2011-05-26T14:44:21Z">
        </test-method>
        <test-method status="PASS" signature="test3Threads()" name="test3Threads" duration-ms="11" started-at="2011-05-26T14:44:21Z" finished-at="2011-05-26T14:44:21Z">
        </test-method>
      </class>
      <class name="test.configuration.ConfigurationTest">
        <test-method status="PASS" signature="verify()" name="verify" duration-ms="0" started-at="2011-05-26T14:44:27Z" finished-at="2011-05-26T14:44:27Z">
        </test-method>
        <test-method status="PASS" signature="beforeMethod()" name="beforeMethod" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:27Z" finished-at="2011-05-26T14:44:27Z">
        </test-method>
        <test-method status="PASS" signature="beforeClass()" name="beforeClass" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:27Z" finished-at="2011-05-26T14:44:27Z">
        </test-method>
        <test-method status="PASS" signature="afterMethod()" name="afterMethod" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:27Z" finished-at="2011-05-26T14:44:27Z">
        </test-method>
        <test-method status="PASS" signature="afterClass()" name="afterClass" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:27Z" finished-at="2011-05-26T14:44:27Z">
        </test-method>
      </class>
      <class name="test.EclipseTest">
        <test-method status="PASS" signature="xmlFileShouldBeRunAtItsPlaceAndNotCopied(org.testng.ITestContext)" name="xmlFileShouldBeRunAtItsPlaceAndNotCopied" duration-ms="0" started-at="2011-05-26T14:44:20Z" finished-at="2011-05-26T14:44:20Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.testng.TestRunner@4c3fe94a]]>
              </value>
            </param>
          </params>
        </test-method>
      </class>
      <class name="test.abstractconfmethod.C">
        <test-method status="PASS" signature="testSetup()" name="testSetup" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:27Z" finished-at="2011-05-26T14:44:27Z">
        </test-method>
        <test-method status="PASS" signature="test1()" name="test1" duration-ms="0" started-at="2011-05-26T14:44:27Z" description="Test depends on a config method that has implements an abstract methods" finished-at="2011-05-26T14:44:27Z">
        </test-method>
        <test-method status="PASS" signature="doSomethingInMiddle()" name="doSomethingInMiddle" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:27Z" depends-on-methods="testSetup" finished-at="2011-05-26T14:44:27Z">
        </test-method>
      </class>
      <class name="test.thread.ThreadPoolSizeWithTimeOutTest">
        <test-method status="PASS" signature="setUp()" name="setUp" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:20Z" finished-at="2011-05-26T14:44:20Z">
        </test-method>
        <test-method status="PASS" signature="f1()" name="f1" duration-ms="0" started-at="2011-05-26T14:44:20Z" finished-at="2011-05-26T14:44:20Z">
        </test-method>
        <test-method status="PASS" signature="f1()" name="f1" duration-ms="0" started-at="2011-05-26T14:44:20Z" finished-at="2011-05-26T14:44:20Z">
        </test-method>
        <test-method status="PASS" signature="f1()" name="f1" duration-ms="0" started-at="2011-05-26T14:44:20Z" finished-at="2011-05-26T14:44:20Z">
        </test-method>
        <test-method status="PASS" signature="f1()" name="f1" duration-ms="1" started-at="2011-05-26T14:44:20Z" finished-at="2011-05-26T14:44:20Z">
        </test-method>
        <test-method status="PASS" signature="f1()" name="f1" duration-ms="0" started-at="2011-05-26T14:44:20Z" finished-at="2011-05-26T14:44:20Z">
        </test-method>
        <test-method status="PASS" signature="verify()" name="verify" duration-ms="0" started-at="2011-05-26T14:44:20Z" depends-on-methods="test.thread.ThreadPoolSizeWithTimeOutTest.f1" finished-at="2011-05-26T14:44:20Z">
        </test-method>
      </class>
      <class name="test.thread.FactoryTest">
        <test-method status="PASS" signature="verifyFactoryParallelMethods()" name="verifyFactoryParallelMethods" duration-ms="16" started-at="2011-05-26T14:44:27Z" finished-at="2011-05-26T14:44:27Z">
        </test-method>
        <test-method status="PASS" signature="verifyFactoryNotParallel()" name="verifyFactoryNotParallel" duration-ms="9" started-at="2011-05-26T14:44:27Z" finished-at="2011-05-26T14:44:27Z">
        </test-method>
      </class>
      <class name="test.MethodTest">
        <test-method status="PASS" signature="excludeMethodsOnly()" name="excludeMethodsOnly" duration-ms="5" started-at="2011-05-26T14:44:20Z" finished-at="2011-05-26T14:44:20Z">
        </test-method>
        <test-method status="PASS" signature="methodSetUp()" name="methodSetUp" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:20Z" finished-at="2011-05-26T14:44:20Z">
        </test-method>
        <test-method status="PASS" signature="methodSetUp()" name="methodSetUp" is-config="true" duration-ms="1" started-at="2011-05-26T14:44:20Z" finished-at="2011-05-26T14:44:20Z">
        </test-method>
        <test-method status="PASS" signature="excludePackage()" name="excludePackage" duration-ms="3" started-at="2011-05-26T14:44:20Z" finished-at="2011-05-26T14:44:20Z">
        </test-method>
        <test-method status="PASS" signature="methodSetUp()" name="methodSetUp" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:20Z" finished-at="2011-05-26T14:44:20Z">
        </test-method>
        <test-method status="PASS" signature="includeMethodsOnly()" name="includeMethodsOnly" duration-ms="4" started-at="2011-05-26T14:44:20Z" finished-at="2011-05-26T14:44:20Z">
        </test-method>
      </class>
      <class name="test.configuration.ConfigurationListenerTest">
        <test-method status="PASS" signature="listenerShouldBeCalled()" name="listenerShouldBeCalled" duration-ms="3" started-at="2011-05-26T14:44:27Z" finished-at="2011-05-26T14:44:27Z">
        </test-method>
      </class>
      <class name="test.failures.FailuresTest">
        <test-method status="PASS" signature="shouldIncludeFailedMethodsFromBaseClass()" name="shouldIncludeFailedMethodsFromBaseClass" duration-ms="20" started-at="2011-05-26T14:44:21Z" finished-at="2011-05-26T14:44:21Z">
        </test-method>
      </class>
      <class name="test.thread.ParallelTestTest">
        <test-method status="PASS" signature="verifyParallelClasses()" name="verifyParallelClasses" duration-ms="15" started-at="2011-05-26T14:44:21Z" finished-at="2011-05-26T14:44:21Z">
        </test-method>
        <test-method status="PASS" signature="methodSetUp()" name="methodSetUp" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:21Z" finished-at="2011-05-26T14:44:21Z">
        </test-method>
        <test-method status="PASS" signature="methodSetUp()" name="methodSetUp" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:21Z" finished-at="2011-05-26T14:44:21Z">
        </test-method>
        <test-method status="PASS" signature="verifyParallelMethods()" name="verifyParallelMethods" duration-ms="25" started-at="2011-05-26T14:44:21Z" finished-at="2011-05-26T14:44:21Z">
        </test-method>
        <test-method status="PASS" signature="methodSetUp()" name="methodSetUp" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:21Z" finished-at="2011-05-26T14:44:21Z">
        </test-method>
        <test-method status="PASS" signature="verifyParallelNone()" name="verifyParallelNone" duration-ms="12" started-at="2011-05-26T14:44:21Z" finished-at="2011-05-26T14:44:21Z">
        </test-method>
        <test-method status="PASS" signature="methodSetUp()" name="methodSetUp" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:21Z" finished-at="2011-05-26T14:44:21Z">
        </test-method>
        <test-method status="PASS" signature="verifyParallelTests()" name="verifyParallelTests" duration-ms="12" started-at="2011-05-26T14:44:21Z" finished-at="2011-05-26T14:44:21Z">
        </test-method>
      </class>
      <class name="test.configuration.BaseGroupsTest">
        <test-method status="PASS" signature="verifySingleInvocation()" name="verifySingleInvocation" duration-ms="34" started-at="2011-05-26T14:44:20Z" finished-at="2011-05-26T14:44:20Z">
        </test-method>
      </class>
      <class name="test.configuration.SuiteTest">
        <test-method status="PASS" signature="test1()" name="test1" duration-ms="0" started-at="2011-05-26T14:44:25Z" finished-at="2011-05-26T14:44:25Z">
        </test-method>
      </class>
      <class name="test.testng249.VerifyTest">
        <test-method status="PASS" signature="verify()" name="verify" duration-ms="10" started-at="2011-05-26T14:44:21Z" finished-at="2011-05-26T14:44:21Z">
        </test-method>
      </class>
      <class name="test.priority.PriorityTest">
        <test-method status="PASS" signature="withPriority2()" name="withPriority2" duration-ms="8" started-at="2011-05-26T14:44:27Z" description="Make sure priorities work even in parallel mode" finished-at="2011-05-26T14:44:27Z">
        </test-method>
        <test-method status="PASS" signature="withPriority()" name="withPriority" duration-ms="8" started-at="2011-05-26T14:44:27Z" description="Make sure priorities work even in parallel mode" finished-at="2011-05-26T14:44:27Z">
        </test-method>
      </class>
      <class name="test.listeners.ListenerInXmlTest">
        <test-method status="PASS" signature="listenerInXmlShouldBeInvoked()" name="listenerInXmlShouldBeInvoked" duration-ms="3" started-at="2011-05-26T14:44:21Z" description="Make sure that listeners defined in testng.xml are invoked" finished-at="2011-05-26T14:44:21Z">
        </test-method>
      </class>
      <class name="test.mannotation.MAnnotation2SampleTest">
        <test-method status="PASS" signature="verifyConfigurationGroupsInheritance()" name="verifyConfigurationGroupsInheritance" duration-ms="1" started-at="2011-05-26T14:44:21Z" finished-at="2011-05-26T14:44:21Z">
        </test-method>
        <test-method status="PASS" signature="init()" name="init" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:21Z" finished-at="2011-05-26T14:44:21Z">
        </test-method>
        <test-method status="PASS" signature="verifyTestDependsOnGroupsInheritance()" name="verifyTestDependsOnGroupsInheritance" duration-ms="1" started-at="2011-05-26T14:44:21Z" finished-at="2011-05-26T14:44:21Z">
        </test-method>
        <test-method status="PASS" signature="verifyTestGroupsInheritance()" name="verifyTestGroupsInheritance" duration-ms="1" started-at="2011-05-26T14:44:21Z" finished-at="2011-05-26T14:44:21Z">
        </test-method>
        <test-method status="PASS" signature="verifyTestEnabledInheritance()" name="verifyTestEnabledInheritance" duration-ms="0" started-at="2011-05-26T14:44:21Z" finished-at="2011-05-26T14:44:21Z">
        </test-method>
        <test-method status="PASS" signature="verifyTestDependsOnMethodsInheritance()" name="verifyTestDependsOnMethodsInheritance" duration-ms="0" started-at="2011-05-26T14:44:21Z" finished-at="2011-05-26T14:44:21Z">
        </test-method>
      </class>
      <class name="test.CountTest">
        <test-method status="PASS" signature="skippedMethodsShouldBeCounted()" name="skippedMethodsShouldBeCounted" duration-ms="4" started-at="2011-05-26T14:44:20Z" description="Make sure that skipped methods are accurately counted" finished-at="2011-05-26T14:44:20Z">
        </test-method>
      </class>
      <class name="test.configuration.MethodCallOrderTest">
        <test-method status="PASS" signature="beforeMethod()" name="beforeMethod" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:21Z" finished-at="2011-05-26T14:44:21Z">
        </test-method>
        <test-method status="PASS" signature="realTest()" name="realTest" duration-ms="0" started-at="2011-05-26T14:44:21Z" finished-at="2011-05-26T14:44:21Z">
        </test-method>
        <test-method status="PASS" signature="beforeClass()" name="beforeClass" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:21Z" finished-at="2011-05-26T14:44:21Z">
        </test-method>
        <test-method status="PASS" signature="afterMethod()" name="afterMethod" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:21Z" finished-at="2011-05-26T14:44:21Z">
        </test-method>
        <test-method status="PASS" signature="afterClass()" name="afterClass" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:21Z" finished-at="2011-05-26T14:44:21Z">
        </test-method>
      </class>
      <class name="test.ReporterApiTest">
        <test-method status="PASS" signature="testApi()" name="testApi" duration-ms="0" started-at="2011-05-26T14:44:27Z" finished-at="2011-05-26T14:44:27Z">
        </test-method>
      </class>
      <class name="test.configuration.BeforeTestOrderingTest">
        <test-method status="PASS" signature="verifyBeforeTestOrdering()" name="verifyBeforeTestOrdering" duration-ms="20" started-at="2011-05-26T14:44:27Z" finished-at="2011-05-26T14:44:27Z">
        </test-method>
      </class>
      <class name="test.regression.BeforeTestFailingTest">
        <test-method status="PASS" signature="beforeTestFailingShouldCauseSkips()" name="beforeTestFailingShouldCauseSkips" duration-ms="7" started-at="2011-05-26T14:44:21Z" finished-at="2011-05-26T14:44:21Z">
        </test-method>
      </class>
      <class name="test.remote.RemoteTest">
        <test-method status="PASS" signature="testSerialized()" name="testSerialized" duration-ms="66" started-at="2011-05-26T14:44:27Z" finished-at="2011-05-26T14:44:27Z">
        </test-method>
        <test-method status="PASS" signature="testString()" name="testString" duration-ms="23" started-at="2011-05-26T14:44:27Z" finished-at="2011-05-26T14:44:27Z">
        </test-method>
      </class>
      <class name="test.sample.AfterClassCalledAtEnd">
        <test-method status="PASS" signature="before1Class()" name="before1Class" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:21Z" finished-at="2011-05-26T14:44:21Z">
        </test-method>
        <test-method status="PASS" signature="test2()" name="test2" duration-ms="0" started-at="2011-05-26T14:44:21Z" finished-at="2011-05-26T14:44:21Z">
        </test-method>
        <test-method status="PASS" signature="test1()" name="test1" duration-ms="0" started-at="2011-05-26T14:44:21Z" description="Verify that beforeClass and afterClass are called correctly" finished-at="2011-05-26T14:44:21Z">
        </test-method>
        <test-method status="PASS" signature="baseAfterClass()" name="baseAfterClass" is-config="true" duration-ms="0" depends-on-groups=".*" started-at="2011-05-26T14:44:21Z" finished-at="2011-05-26T14:44:21Z">
        </test-method>
        <test-method status="PASS" signature="afterClass()" name="afterClass" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:21Z" finished-at="2011-05-26T14:44:21Z">
        </test-method>
        <test-method status="PASS" signature="test3()" name="test3" duration-ms="0" started-at="2011-05-26T14:44:21Z" finished-at="2011-05-26T14:44:21Z">
        </test-method>
      </class>
      <class name="test.configuration.ReflectMethodParametrizedConfigurationMethodTest">
        <test-method status="PASS" signature="test1()" name="test1" duration-ms="0" started-at="2011-05-26T14:44:21Z" finished-at="2011-05-26T14:44:21Z">
        </test-method>
        <test-method status="PASS" signature="test2()" name="test2" duration-ms="0" started-at="2011-05-26T14:44:21Z" finished-at="2011-05-26T14:44:21Z">
        </test-method>
        <test-method status="PASS" signature="assertBeforeAfterMethodsInvocations()" name="assertBeforeAfterMethodsInvocations" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:21Z" finished-at="2011-05-26T14:44:21Z">
        </test-method>
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)" name="beforeMethod" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:21Z" finished-at="2011-05-26T14:44:21Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void test.configuration.ReflectMethodParametrizedConfigurationMethodTest.test2()]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="afterMethod(java.lang.reflect.Method)" name="afterMethod" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:21Z" finished-at="2011-05-26T14:44:21Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void test.configuration.ReflectMethodParametrizedConfigurationMethodTest.test1()]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="afterMethod(java.lang.reflect.Method)" name="afterMethod" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:21Z" finished-at="2011-05-26T14:44:21Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void test.configuration.ReflectMethodParametrizedConfigurationMethodTest.test2()]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)" name="beforeMethod" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:21Z" finished-at="2011-05-26T14:44:21Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void test.configuration.ReflectMethodParametrizedConfigurationMethodTest.test1()]]>
              </value>
            </param>
          </params>
        </test-method>
      </class>
      <class name="test.jar.JarTest">
        <test-method status="PASS" signature="jarWithoutTestngXml()" name="jarWithoutTestngXml" duration-ms="4" started-at="2011-05-26T14:44:21Z" finished-at="2011-05-26T14:44:21Z">
        </test-method>
        <test-method status="PASS" signature="jarWithTestngXml()" name="jarWithTestngXml" duration-ms="4" started-at="2011-05-26T14:44:21Z" finished-at="2011-05-26T14:44:21Z">
        </test-method>
        <test-method status="PASS" signature="jarWithTestngXmlOverriddenOnCommandLine()" name="jarWithTestngXmlOverriddenOnCommandLine" duration-ms="4" started-at="2011-05-26T14:44:21Z" finished-at="2011-05-26T14:44:21Z">
        </test-method>
      </class>
      <class name="test.invokedmethodlistener.InvokedMethodListenerTest">
        <test-method status="PASS" signature="sameMethodInvokedMultipleTimesShouldHaveDifferentTimeStamps()" name="sameMethodInvokedMultipleTimesShouldHaveDifferentTimeStamps" duration-ms="209" started-at="2011-05-26T14:44:21Z" finished-at="2011-05-26T14:44:21Z">
        </test-method>
        <test-method status="PASS" signature="testMethodsWithExpectedExceptionsShouldShowUpAsPass()" name="testMethodsWithExpectedExceptionsShouldShowUpAsPass" duration-ms="4" started-at="2011-05-26T14:44:21Z" description="Test methods with expected exceptions should show up as pass in IInvokedMethodListener&#039;s afterInvocaiton method" finished-at="2011-05-26T14:44:21Z">
        </test-method>
        <test-method status="PASS" signature="withFailure()" name="withFailure" duration-ms="6" started-at="2011-05-26T14:44:21Z" finished-at="2011-05-26T14:44:21Z">
        </test-method>
        <test-method status="PASS" signature="withSuccess()" name="withSuccess" duration-ms="5" started-at="2011-05-26T14:44:21Z" finished-at="2011-05-26T14:44:21Z">
        </test-method>
      </class>
      <class name="test.listeners.ResultEndMillisTest">
        <test-method status="PASS" signature="endMillisShouldBeNonNull()" name="endMillisShouldBeNonNull" duration-ms="11" started-at="2011-05-26T14:44:21Z" finished-at="2011-05-26T14:44:21Z">
        </test-method>
      </class>
      <class name="test.override.OverrideTest">
        <test-method status="PASS" signature="overrideIncludeAndExcludeShouldWork()" name="overrideIncludeAndExcludeShouldWork" duration-ms="63" started-at="2011-05-26T14:44:27Z" description="Override -groups and -excludegroups" finished-at="2011-05-26T14:44:27Z">
        </test-method>
        <test-method status="PASS" signature="overrideIncludeShouldWork()" name="overrideIncludeShouldWork" duration-ms="2" started-at="2011-05-26T14:44:27Z" description="Override -groups" finished-at="2011-05-26T14:44:27Z">
        </test-method>
        <test-method status="PASS" signature="overrideExcludeShouldWork()" name="overrideExcludeShouldWork" duration-ms="2" started-at="2011-05-26T14:44:27Z" description="Override -excludegroups" finished-at="2011-05-26T14:44:27Z">
        </test-method>
      </class>
      <class name="test.thread.ParallelSuiteTest">
        <test-method status="PASS" signature="suitesShouldRunInOrder()" name="suitesShouldRunInOrder" duration-ms="7" started-at="2011-05-26T14:44:24Z" description="If suiteThreadPoolSize and randomizeSuites are not specified suites should run in order specified in XML" finished-at="2011-05-26T14:44:24Z">
        </test-method>
        <test-method status="PASS" signature="suitesShouldRunInParallel5()" name="suitesShouldRunInParallel5" duration-ms="31" started-at="2011-05-26T14:44:24Z" finished-at="2011-05-26T14:44:24Z">
        </test-method>
        <test-method status="PASS" signature="suitesShouldRunInParallel6()" name="suitesShouldRunInParallel6" duration-ms="54" started-at="2011-05-26T14:44:24Z" description="Number of threads (2) is less than level of suites (3)" finished-at="2011-05-26T14:44:24Z">
        </test-method>
        <test-method status="PASS" signature="suitesShouldRunInParallel1()" name="suitesShouldRunInParallel1" duration-ms="52" started-at="2011-05-26T14:44:24Z" finished-at="2011-05-26T14:44:24Z">
        </test-method>
        <test-method status="PASS" signature="suitesShouldRunInParallel2()" name="suitesShouldRunInParallel2" duration-ms="11" started-at="2011-05-26T14:44:24Z" finished-at="2011-05-26T14:44:24Z">
        </test-method>
        <test-method status="PASS" signature="suitesShouldRunInParallel3()" name="suitesShouldRunInParallel3" duration-ms="10" started-at="2011-05-26T14:44:24Z" description="Number of threads (2) is less than number of suites (3)" finished-at="2011-05-26T14:44:24Z">
        </test-method>
        <test-method status="PASS" signature="suitesShouldRunInParallel4()" name="suitesShouldRunInParallel4" duration-ms="29" started-at="2011-05-26T14:44:24Z" finished-at="2011-05-26T14:44:25Z">
        </test-method>
        <test-method status="PASS" signature="suitesShouldRun1()" name="suitesShouldRun1" duration-ms="60" started-at="2011-05-26T14:44:25Z" description="Number of threads (1) is less than number of levels of suites (2)" finished-at="2011-05-26T14:44:25Z">
        </test-method>
      </class>
      <class name="test.annotationtransformer.AnnotationTransformerTest">
        <test-method status="PASS" signature="verifyConfigurationTransformer()" name="verifyConfigurationTransformer" duration-ms="11" started-at="2011-05-26T14:44:21Z" finished-at="2011-05-26T14:44:21Z">
        </test-method>
        <test-method status="PASS" signature="verifyAnnotationTransformerClass()" name="verifyAnnotationTransformerClass" duration-ms="2013" started-at="2011-05-26T14:44:21Z" finished-at="2011-05-26T14:44:23Z">
        </test-method>
        <test-method status="PASS" signature="verifyAnnotationTransformerMethod()" name="verifyAnnotationTransformerMethod" duration-ms="35" started-at="2011-05-26T14:44:23Z" finished-at="2011-05-26T14:44:23Z">
        </test-method>
        <test-method status="PASS" signature="verifyDataProviderTransformer()" name="verifyDataProviderTransformer" duration-ms="2" started-at="2011-05-26T14:44:23Z" finished-at="2011-05-26T14:44:23Z">
        </test-method>
        <test-method status="PASS" signature="verifyAnnotationWithoutTransformer()" name="verifyAnnotationWithoutTransformer" duration-ms="12" started-at="2011-05-26T14:44:23Z" finished-at="2011-05-26T14:44:23Z">
        </test-method>
        <test-method status="PASS" signature="verifyAnnotationTransformerClass2()" name="verifyAnnotationTransformerClass2" duration-ms="1018" started-at="2011-05-26T14:44:23Z" finished-at="2011-05-26T14:44:24Z">
        </test-method>
        <test-method status="PASS" signature="annotationTransformerInXmlShouldBeRun()" name="annotationTransformerInXmlShouldBeRun" duration-ms="3" started-at="2011-05-26T14:44:24Z" finished-at="2011-05-26T14:44:24Z">
        </test-method>
        <test-method status="PASS" signature="verifyFactoryTransformer()" name="verifyFactoryTransformer" duration-ms="3" started-at="2011-05-26T14:44:24Z" finished-at="2011-05-26T14:44:24Z">
        </test-method>
      </class>
      <class name="test.simple.IncludedExcludedTest">
        <test-method status="PASS" signature="init()" name="init" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:21Z" finished-at="2011-05-26T14:44:21Z">
        </test-method>
        <test-method status="PASS" signature="verifyIncludedExcludedCount1()" name="verifyIncludedExcludedCount1" duration-ms="4" started-at="2011-05-26T14:44:21Z" description="First test method" finished-at="2011-05-26T14:44:21Z">
        </test-method>
        <test-method status="PASS" signature="verifyIncludedExcludedCount2()" name="verifyIncludedExcludedCount2" duration-ms="5" started-at="2011-05-26T14:44:21Z" description="Second test method" finished-at="2011-05-26T14:44:21Z">
        </test-method>
        <test-method status="PASS" signature="init()" name="init" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:21Z" finished-at="2011-05-26T14:44:21Z">
        </test-method>
      </class>
      <class name="test.privatemethod.PrivateMethodTest$PrivateMethodInnerTest">
        <test-method status="PASS" signature="testPrivateMethod()" name="testPrivateMethod" duration-ms="0" started-at="2011-05-26T14:44:21Z" finished-at="2011-05-26T14:44:21Z">
        </test-method>
      </class>
      <class name="test.configuration.MultipleBeforeGroupTest">
        <test-method status="PASS" signature="test()" name="test" duration-ms="0" started-at="2011-05-26T14:44:20Z" finished-at="2011-05-26T14:44:20Z">
        </test-method>
        <test-method status="PASS" signature="beforeGroups()" name="beforeGroups" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:20Z" finished-at="2011-05-26T14:44:20Z">
        </test-method>
        <test-method status="PASS" signature="verify()" name="verify" duration-ms="0" started-at="2011-05-26T14:44:20Z" depends-on-methods="test.configuration.MultipleBeforeGroupTest.test" finished-at="2011-05-26T14:44:20Z">
        </test-method>
      </class>
      <class name="test.listeners.EndMillisShouldNotBeZeroTest">
        <test-method status="PASS" signature="f1()" name="f1" duration-ms="1" started-at="2011-05-26T14:44:20Z" finished-at="2011-05-26T14:44:20Z">
        </test-method>
        <test-method status="PASS" signature="bm()" name="bm" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:20Z" finished-at="2011-05-26T14:44:20Z">
        </test-method>
        <test-method status="PASS" signature="f2()" name="f2" duration-ms="0" started-at="2011-05-26T14:44:20Z" description="Make sure that ITestResult#getEndMillis is properly set" depends-on-methods="test.listeners.EndMillisShouldNotBeZeroTest.f1" finished-at="2011-05-26T14:44:20Z">
        </test-method>
      </class>
      <class name="test.NestedStaticTest">
        <test-method status="PASS" signature="nestedClassShouldBeIncluded()" name="nestedClassShouldBeIncluded" duration-ms="3" started-at="2011-05-26T14:44:20Z" finished-at="2011-05-26T14:44:20Z">
        </test-method>
      </class>
      <class name="test.verify.VerifyTest">
        <test-method status="PASS" signature="verifyWithAnnotation()" name="verifyWithAnnotation" duration-ms="9" started-at="2011-05-26T14:44:27Z" finished-at="2011-05-26T14:44:27Z">
        </test-method>
        <test-method status="PASS" signature="verifyBaseClassTestListener()" name="verifyBaseClassTestListener" duration-ms="1" started-at="2011-05-26T14:44:27Z" finished-at="2011-05-26T14:44:27Z">
        </test-method>
        <test-method status="PASS" signature="verifyWithoutAnnotation()" name="verifyWithoutAnnotation" duration-ms="2" started-at="2011-05-26T14:44:27Z" finished-at="2011-05-26T14:44:27Z">
        </test-method>
        <test-method status="PASS" signature="verifyTestListener()" name="verifyTestListener" duration-ms="2" started-at="2011-05-26T14:44:27Z" finished-at="2011-05-26T14:44:27Z">
        </test-method>
      </class>
      <class name="test.Test1">
        <test-method status="PASS" signature="regexp()" name="regexp" duration-ms="6" started-at="2011-05-26T14:44:21Z" finished-at="2011-05-26T14:44:21Z">
        </test-method>
        <test-method status="PASS" signature="methodSetUp()" name="methodSetUp" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:21Z" finished-at="2011-05-26T14:44:21Z">
        </test-method>
        <test-method status="PASS" signature="methodSetUp()" name="methodSetUp" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:21Z" finished-at="2011-05-26T14:44:21Z">
        </test-method>
        <test-method status="PASS" signature="excludedGroups()" name="excludedGroups" duration-ms="10" started-at="2011-05-26T14:44:21Z" finished-at="2011-05-26T14:44:21Z">
        </test-method>
        <test-method status="PASS" signature="methodSetUp()" name="methodSetUp" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:21Z" finished-at="2011-05-26T14:44:21Z">
        </test-method>
        <test-method status="PASS" signature="groupsOfGroupsWithIndirections()" name="groupsOfGroupsWithIndirections" duration-ms="7" started-at="2011-05-26T14:44:21Z" finished-at="2011-05-26T14:44:21Z">
        </test-method>
        <test-method status="PASS" signature="groupsOfGroupsSimple()" name="groupsOfGroupsSimple" duration-ms="6" started-at="2011-05-26T14:44:21Z" finished-at="2011-05-26T14:44:21Z">
        </test-method>
        <test-method status="PASS" signature="methodSetUp()" name="methodSetUp" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:21Z" finished-at="2011-05-26T14:44:21Z">
        </test-method>
        <test-method status="PASS" signature="methodSetUp()" name="methodSetUp" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:21Z" finished-at="2011-05-26T14:44:21Z">
        </test-method>
        <test-method status="PASS" signature="logger()" name="logger" duration-ms="0" started-at="2011-05-26T14:44:21Z" finished-at="2011-05-26T14:44:21Z">
        </test-method>
        <test-method status="PASS" signature="includedGroups()" name="includedGroups" duration-ms="6" started-at="2011-05-26T14:44:21Z" finished-at="2011-05-26T14:44:21Z">
        </test-method>
        <test-method status="PASS" signature="methodSetUp()" name="methodSetUp" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:21Z" finished-at="2011-05-26T14:44:21Z">
        </test-method>
        <test-method status="PASS" signature="methodSetUp()" name="methodSetUp" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:21Z" finished-at="2011-05-26T14:44:21Z">
        </test-method>
        <test-method status="PASS" signature="groupsOfGroupsWithCycle()" name="groupsOfGroupsWithCycle" duration-ms="13" started-at="2011-05-26T14:44:21Z" finished-at="2011-05-26T14:44:21Z">
        </test-method>
      </class>
      <class name="test.listeners.ListenerTest">
        <test-method status="PASS" signature="bm()" name="bm" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:21Z" finished-at="2011-05-26T14:44:21Z">
        </test-method>
        <test-method status="PASS" signature="aggregateListeners()" name="aggregateListeners" duration-ms="3" started-at="2011-05-26T14:44:21Z" description="Inherited @Listeners annotations should aggregate" finished-at="2011-05-26T14:44:21Z">
        </test-method>
        <test-method status="PASS" signature="bm()" name="bm" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:21Z" finished-at="2011-05-26T14:44:21Z">
        </test-method>
        <test-method status="PASS" signature="failureBeforeAfterMethod()" name="failureBeforeAfterMethod" duration-ms="2" started-at="2011-05-26T14:44:21Z" description="TESTNG-400: onTestFailure should be called before @AfterMethod" finished-at="2011-05-26T14:44:21Z">
        </test-method>
        <test-method status="PASS" signature="bm()" name="bm" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:21Z" finished-at="2011-05-26T14:44:21Z">
        </test-method>
        <test-method status="PASS" signature="listenerShouldBeCalledBeforeConfiguration()" name="listenerShouldBeCalledBeforeConfiguration" duration-ms="3" started-at="2011-05-26T14:44:21Z" description="Ensure that if a listener is present, we get test(), onSuccess(), afterMethod()" finished-at="2011-05-26T14:44:21Z">
        </test-method>
        <test-method status="PASS" signature="suiteListenersShouldWork()" name="suiteListenersShouldWork" duration-ms="2" started-at="2011-05-26T14:44:21Z" description="@Listeners with an ISuiteListener" finished-at="2011-05-26T14:44:21Z">
        </test-method>
        <test-method status="PASS" signature="bm()" name="bm" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:21Z" finished-at="2011-05-26T14:44:21Z">
        </test-method>
      </class>
      <class name="test.xml.XmlVerifyTest">
        <test-method status="PASS" signature="handleInvalidSuites()" name="handleInvalidSuites" duration-ms="15" started-at="2011-05-26T14:44:21Z" description="Ensure that TestNG stops without running any tests if some class included in suite is missing" finished-at="2011-05-26T14:44:21Z">
        </test-method>
        <test-method status="PASS" signature="handleInvalidXml()" name="handleInvalidXml" duration-ms="1" started-at="2011-05-26T14:44:21Z" description="Checks to make sure that NPE is not thrown when &lt;test&gt; tag is missing" finished-at="2011-05-26T14:44:21Z">
          <exception class="org.testng.TestNGException">
            <message>
              <![CDATA[org.xml.sax.SAXException: Check the testng XML against schema. Expected <test> tag not found]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.testng.TestNGException: org.xml.sax.SAXException: Check the testng XML against schema. Expected <test> tag not found
	at org.testng.TestNG.initializeSuitesAndJarFile(TestNG.java:316)
	at org.testng.TestNG.run(TestNG.java:882)
	at test.xml.XmlVerifyTest.handleInvalidXml(XmlVerifyTest.java:62)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:76)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:673)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:842)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1166)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
	at org.testng.TestRunner.runWorkers(TestRunner.java:1150)
	at org.testng.TestRunner.privateRun(TestRunner.java:752)
	at org.testng.TestRunner.run(TestRunner.java:603)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:329)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:324)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:286)
	at org.testng.SuiteRunner.run(SuiteRunner.java:235)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1049)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:974)
	at org.testng.TestNG.run(TestNG.java:905)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:74)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:93)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:101)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.apache.maven.surefire.booter.ProviderFactory$ClassLoaderProxy.invoke(ProviderFactory.java:103)
	at $Proxy0.invoke(Unknown Source)
	at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:145)
	at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcess(SurefireStarter.java:87)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:69)
Caused by: org.xml.sax.SAXException: Check the testng XML against schema. Expected <test> tag not found
	at org.testng.xml.TestNGContentHandler.xmlRun(TestNGContentHandler.java:448)
	at org.testng.xml.TestNGContentHandler.endElement(TestNGContentHandler.java:596)
	at com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser.endElement(AbstractSAXParser.java:601)
	at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl.scanEndElement(XMLDocumentFragmentScannerImpl.java:1782)
	at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl$FragmentContentDriver.next(XMLDocumentFragmentScannerImpl.java:2938)
	at com.sun.org.apache.xerces.internal.impl.XMLDocumentScannerImpl.next(XMLDocumentScannerImpl.java:648)
	at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl.scanDocument(XMLDocumentFragmentScannerImpl.java:511)
	at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:808)
	at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:737)
	at com.sun.org.apache.xerces.internal.parsers.XMLParser.parse(XMLParser.java:119)
	at com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser.parse(AbstractSAXParser.java:1205)
	at com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser.parse(SAXParserImpl.java:522)
	at javax.xml.parsers.SAXParser.parse(SAXParser.java:395)
	at javax.xml.parsers.SAXParser.parse(SAXParser.java:198)
	at org.testng.xml.SuiteXmlParser.parse(SuiteXmlParser.java:17)
	at org.testng.xml.SuiteXmlParser.parse(SuiteXmlParser.java:10)
	at org.testng.xml.Parser.parse(Parser.java:170)
	at org.testng.TestNG.initializeSuitesAndJarFile(TestNG.java:286)
	... 36 more
]]>
            </full-stacktrace>
          </exception>
        </test-method>
        <test-method status="PASS" signature="simple()" name="simple" duration-ms="0" started-at="2011-05-26T14:44:21Z" finished-at="2011-05-26T14:44:21Z">
        </test-method>
      </class>
      <class name="test.preserveorder.PreserveOrderTest">
        <test-method status="PASS" signature="orderShouldBePreservedWithDependencies()" name="orderShouldBePreservedWithDependencies" duration-ms="6" started-at="2011-05-26T14:44:21Z" finished-at="2011-05-26T14:44:21Z">
        </test-method>
        <test-method status="PASS" signature="preserveClassOrder()" name="preserveClassOrder" duration-ms="37" started-at="2011-05-26T14:44:21Z" finished-at="2011-05-26T14:44:21Z">
        </test-method>
        <test-method status="PASS" signature="preserveMethodOrder()" name="preserveMethodOrder" duration-ms="13" started-at="2011-05-26T14:44:21Z" finished-at="2011-05-26T14:44:21Z">
        </test-method>
        <test-method status="PASS" signature="preserveOrderAnna([Ljava.lang.String;, [Ljava.lang.String;)" name="preserveOrderAnna" duration-ms="4" started-at="2011-05-26T14:44:21Z" finished-at="2011-05-26T14:44:21Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.String;@77ed2061]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.String;@70e8fdc9]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="preserveOrderAnna([Ljava.lang.String;, [Ljava.lang.String;)" name="preserveOrderAnna" duration-ms="4" started-at="2011-05-26T14:44:21Z" finished-at="2011-05-26T14:44:21Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.String;@506dd108]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.String;@59b68d78]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="preserveOrderAnna([Ljava.lang.String;, [Ljava.lang.String;)" name="preserveOrderAnna" duration-ms="4" started-at="2011-05-26T14:44:21Z" finished-at="2011-05-26T14:44:21Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.String;@6001ef4b]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.String;@1f05562b]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="preserveOrderAnna([Ljava.lang.String;, [Ljava.lang.String;)" name="preserveOrderAnna" duration-ms="3" started-at="2011-05-26T14:44:21Z" finished-at="2011-05-26T14:44:21Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.String;@175c30f6]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.String;@25927275]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="preserveOrderAnna([Ljava.lang.String;, [Ljava.lang.String;)" name="preserveOrderAnna" duration-ms="4" started-at="2011-05-26T14:44:21Z" finished-at="2011-05-26T14:44:21Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.String;@31987298]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.String;@f8b7298]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="preserveOrderAnna([Ljava.lang.String;, [Ljava.lang.String;)" name="preserveOrderAnna" duration-ms="3" started-at="2011-05-26T14:44:21Z" finished-at="2011-05-26T14:44:21Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.String;@c106121]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.String;@758c3b7]]>
              </value>
            </param>
          </params>
        </test-method>
      </class>
      <class name="test.thread.ThreadPoolSizeTest">
        <test-method status="PASS" signature="setUp()" name="setUp" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:20Z" finished-at="2011-05-26T14:44:20Z">
        </test-method>
        <test-method status="PASS" signature="f1()" name="f1" duration-ms="0" started-at="2011-05-26T14:44:20Z" finished-at="2011-05-26T14:44:20Z">
        </test-method>
        <test-method status="PASS" signature="f1()" name="f1" duration-ms="0" started-at="2011-05-26T14:44:20Z" finished-at="2011-05-26T14:44:20Z">
        </test-method>
        <test-method status="PASS" signature="f1()" name="f1" duration-ms="0" started-at="2011-05-26T14:44:20Z" finished-at="2011-05-26T14:44:20Z">
        </test-method>
        <test-method status="PASS" signature="f1()" name="f1" duration-ms="0" started-at="2011-05-26T14:44:20Z" finished-at="2011-05-26T14:44:20Z">
        </test-method>
        <test-method status="PASS" signature="f1()" name="f1" duration-ms="0" started-at="2011-05-26T14:44:20Z" finished-at="2011-05-26T14:44:20Z">
        </test-method>
        <test-method status="PASS" signature="verify()" name="verify" duration-ms="0" started-at="2011-05-26T14:44:20Z" depends-on-methods="test.thread.ThreadPoolSizeTest.f1" finished-at="2011-05-26T14:44:20Z">
        </test-method>
      </class>
      <class name="test.DynamicGraphTest">
        <test-method status="PASS" signature="test8()" name="test8" duration-ms="0" started-at="2011-05-26T14:44:21Z" finished-at="2011-05-26T14:44:21Z">
        </test-method>
        <test-method status="PASS" signature="test2()" name="test2" duration-ms="0" started-at="2011-05-26T14:44:21Z" finished-at="2011-05-26T14:44:21Z">
        </test-method>
      </class>
      <class name="test.MapTest">
        <test-method status="PASS" signature="testMap()" name="testMap" duration-ms="1" started-at="2011-05-26T14:44:20Z" description="Make sure that arrays as map values work with assert" finished-at="2011-05-26T14:44:20Z">
        </test-method>
      </class>
      <class name="test.thread.DataProviderThreadPoolSizeTest">
        <test-method status="PASS" signature="shouldUseDefaultDataProviderThreadCount()" name="shouldUseDefaultDataProviderThreadCount" duration-ms="1019" started-at="2011-05-26T14:44:25Z" finished-at="2011-05-26T14:44:26Z">
        </test-method>
        <test-method status="PASS" signature="shouldNotUseThreadsIfNotUsingParallel()" name="shouldNotUseThreadsIfNotUsingParallel" duration-ms="26" started-at="2011-05-26T14:44:26Z" finished-at="2011-05-26T14:44:26Z">
        </test-method>
        <test-method status="PASS" signature="shouldUseSpecifiedDataProviderThreadCount()" name="shouldUseSpecifiedDataProviderThreadCount" duration-ms="1008" started-at="2011-05-26T14:44:26Z" finished-at="2011-05-26T14:44:27Z">
        </test-method>
      </class>
      <class name="test.testng285.TestNG285Test">
        <test-method status="PASS" signature="methodSetUp()" name="methodSetUp" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:21Z" finished-at="2011-05-26T14:44:21Z">
        </test-method>
        <test-method status="PASS" signature="verifyBug()" name="verifyBug" duration-ms="7" started-at="2011-05-26T14:44:21Z" finished-at="2011-05-26T14:44:21Z">
        </test-method>
      </class>
      <class name="test.configuration.SuiteFactoryOnceTest">
        <test-method status="PASS" signature="suiteMethodsShouldOnlyRunOnce()" name="suiteMethodsShouldOnlyRunOnce" duration-ms="4" started-at="2011-05-26T14:44:21Z" finished-at="2011-05-26T14:44:21Z">
        </test-method>
      </class>
      <class name="test.conffailure.ConfigurationFailure">
        <test-method status="PASS" signature="beforeTestClassFails()" name="beforeTestClassFails" duration-ms="26" started-at="2011-05-26T14:44:20Z" finished-at="2011-05-26T14:44:20Z">
        </test-method>
        <test-method status="PASS" signature="beforeTestSuiteFails()" name="beforeTestSuiteFails" duration-ms="20" started-at="2011-05-26T14:44:20Z" finished-at="2011-05-26T14:44:20Z">
        </test-method>
      </class>
      <class name="test.ClassConfigurations">
        <test-method status="PASS" signature="beforeTestClass()" name="beforeTestClass" is-config="true" duration-ms="1" started-at="2011-05-26T14:44:20Z" finished-at="2011-05-26T14:44:20Z">
        </test-method>
        <test-method status="PASS" signature="testOne()" name="testOne" duration-ms="0" started-at="2011-05-26T14:44:20Z" finished-at="2011-05-26T14:44:20Z">
        </test-method>
        <test-method status="PASS" signature="testTwo()" name="testTwo" duration-ms="0" started-at="2011-05-26T14:44:20Z" finished-at="2011-05-26T14:44:20Z">
        </test-method>
        <test-method status="PASS" signature="testThree()" name="testThree" duration-ms="0" started-at="2011-05-26T14:44:20Z" finished-at="2011-05-26T14:44:20Z">
        </test-method>
        <test-method status="PASS" signature="afterTestClass()" name="afterTestClass" is-config="true" duration-ms="1" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
        <test-method status="PASS" signature="afterTest()" name="afterTest" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
        <test-method status="PASS" signature="afterTest()" name="afterTest" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
      </class>
      <class name="test.testng195.AfterMethodTest">
        <test-method status="PASS" signature="testContextShouldBeInitialized()" name="testContextShouldBeInitialized" duration-ms="2" started-at="2011-05-26T14:44:27Z" finished-at="2011-05-26T14:44:27Z">
        </test-method>
      </class>
      <class name="test.alwaysrun.AlwaysRunTest">
        <test-method status="PASS" signature="withAlwaysRunAfter()" name="withAlwaysRunAfter" duration-ms="2" started-at="2011-05-26T14:44:20Z" finished-at="2011-05-26T14:44:20Z">
        </test-method>
        <test-method status="PASS" signature="withoutAlwaysRunAfter()" name="withoutAlwaysRunAfter" duration-ms="2" started-at="2011-05-26T14:44:20Z" finished-at="2011-05-26T14:44:20Z">
        </test-method>
        <test-method status="PASS" signature="withoutAlwaysRunBefore()" name="withoutAlwaysRunBefore" duration-ms="3" started-at="2011-05-26T14:44:20Z" finished-at="2011-05-26T14:44:20Z">
        </test-method>
      </class>
      <class name="test.reports.ReportTest">
        <test-method status="PASS" signature="directoryShouldBeSuiteName()" name="directoryShouldBeSuiteName" duration-ms="8" started-at="2011-05-26T14:44:21Z" finished-at="2011-05-26T14:44:21Z">
        </test-method>
        <test-method status="PASS" signature="oneDirectoryPerSuite()" name="oneDirectoryPerSuite" duration-ms="15" started-at="2011-05-26T14:44:21Z" finished-at="2011-05-26T14:44:21Z">
        </test-method>
        <test-method status="PASS" signature="reportLogShouldBeAvailableEvenWithTimeOut()" name="reportLogShouldBeAvailableEvenWithTimeOut" duration-ms="11" started-at="2011-05-26T14:44:21Z" finished-at="2011-05-26T14:44:21Z">
        </test-method>
        <test-method status="PASS" signature="shouldHonorSuiteName()" name="shouldHonorSuiteName" duration-ms="15" started-at="2011-05-26T14:44:21Z" finished-at="2011-05-26T14:44:21Z">
        </test-method>
        <test-method status="PASS" signature="verifyIndex()" name="verifyIndex" duration-ms="10" started-at="2011-05-26T14:44:21Z" finished-at="2011-05-26T14:44:21Z">
        </test-method>
      </class>
      <class name="test.superclass.Test3">
        <test-method status="PASS" signature="shouldExcludeBaseMethods()" name="shouldExcludeBaseMethods" duration-ms="5" started-at="2011-05-26T14:44:27Z" finished-at="2011-05-26T14:44:27Z">
        </test-method>
        <test-method status="PASS" signature="methodSetUp()" name="methodSetUp" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:27Z" finished-at="2011-05-26T14:44:27Z">
        </test-method>
      </class>
      <class name="test.multiple.TestMultiple">
        <test-method status="PASS" signature="multiple()" name="multiple" duration-ms="14" started-at="2011-05-26T14:44:27Z" finished-at="2011-05-26T14:44:27Z">
        </test-method>
        <test-method status="PASS" signature="methodSetUp()" name="methodSetUp" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:27Z" finished-at="2011-05-26T14:44:27Z">
        </test-method>
      </class>
      <class name="test.abstractmethods.AbstractTest">
        <test-method status="PASS" signature="abstractShouldRun()" name="abstractShouldRun" duration-ms="2" started-at="2011-05-26T14:44:21Z" description="Abstract methods defined in a superclass should be run" finished-at="2011-05-26T14:44:21Z">
        </test-method>
      </class>
      <class name="test.configuration.GroupsTest">
        <test-method status="PASS" signature="setUp()" name="setUp" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:20Z" finished-at="2011-05-26T14:44:20Z">
        </test-method>
        <test-method status="PASS" signature="verifyBothAfterGroups()" name="verifyBothAfterGroups" duration-ms="17" started-at="2011-05-26T14:44:20Z" finished-at="2011-05-26T14:44:21Z">
        </test-method>
        <test-method status="PASS" signature="setUp()" name="setUp" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:21Z" finished-at="2011-05-26T14:44:21Z">
        </test-method>
        <test-method status="PASS" signature="verifyDataProviderAfterGroups()" name="verifyDataProviderAfterGroups" duration-ms="14" started-at="2011-05-26T14:44:21Z" finished-at="2011-05-26T14:44:21Z">
        </test-method>
        <test-method status="PASS" signature="setUp()" name="setUp" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:21Z" finished-at="2011-05-26T14:44:21Z">
        </test-method>
        <test-method status="PASS" signature="verifyParametersAfterGroups()" name="verifyParametersAfterGroups" duration-ms="15" started-at="2011-05-26T14:44:21Z" finished-at="2011-05-26T14:44:21Z">
        </test-method>
      </class>
      <class name="test.GraphTest">
        <test-method status="PASS" signature="cycleShouldBeCorrect()" name="cycleShouldBeCorrect" duration-ms="1" started-at="2011-05-26T14:44:27Z" finished-at="2011-05-26T14:44:27Z">
        </test-method>
        <test-method status="PASS" signature="sort()" name="sort" duration-ms="0" started-at="2011-05-26T14:44:27Z" finished-at="2011-05-26T14:44:27Z">
        </test-method>
        <test-method status="PASS" signature="findPredecessorsTiming()" name="findPredecessorsTiming" duration-ms="3" started-at="2011-05-26T14:44:27Z" finished-at="2011-05-26T14:44:27Z">
        </test-method>
        <test-method status="PASS" signature="findPredecessors()" name="findPredecessors" duration-ms="0" started-at="2011-05-26T14:44:27Z" finished-at="2011-05-26T14:44:27Z">
        </test-method>
        <test-method status="PASS" signature="cycleShouldFail()" name="cycleShouldFail" duration-ms="1" started-at="2011-05-26T14:44:27Z" finished-at="2011-05-26T14:44:27Z">
          <exception class="org.testng.TestNGException">
            <message>
              <![CDATA[
The following methods have cyclic dependencies:
2
3
1
]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.testng.TestNGException: 
The following methods have cyclic dependencies:
2
3
1

	at org.testng.internal.Graph.topologicalSort(Graph.java:150)
	at test.GraphTest.cycleShouldFail(GraphTest.java:55)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:76)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:673)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:842)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1166)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
	at org.testng.TestRunner.runWorkers(TestRunner.java:1150)
	at org.testng.TestRunner.privateRun(TestRunner.java:752)
	at org.testng.TestRunner.run(TestRunner.java:603)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:329)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:324)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:286)
	at org.testng.SuiteRunner.run(SuiteRunner.java:235)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1049)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:974)
	at org.testng.TestNG.run(TestNG.java:905)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:74)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:93)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:101)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.apache.maven.surefire.booter.ProviderFactory$ClassLoaderProxy.invoke(ProviderFactory.java:103)
	at $Proxy0.invoke(Unknown Source)
	at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:145)
	at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcess(SurefireStarter.java:87)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:69)
]]>
            </full-stacktrace>
          </exception>
        </test-method>
      </class>
      <class name="test.thread.SequentialTest">
        <test-method status="PASS" signature="methodSetUp()" name="methodSetUp" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:27Z" finished-at="2011-05-26T14:44:27Z">
        </test-method>
        <test-method status="PASS" signature="verifySequential2()" name="verifySequential2" duration-ms="8" started-at="2011-05-26T14:44:27Z" finished-at="2011-05-26T14:44:27Z">
        </test-method>
        <test-method status="PASS" signature="verifySequential1()" name="verifySequential1" duration-ms="4" started-at="2011-05-26T14:44:27Z" finished-at="2011-05-26T14:44:27Z">
        </test-method>
        <test-method status="PASS" signature="methodSetUp()" name="methodSetUp" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:27Z" finished-at="2011-05-26T14:44:27Z">
        </test-method>
        <test-method status="PASS" signature="methodSetUp()" name="methodSetUp" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:27Z" finished-at="2011-05-26T14:44:27Z">
        </test-method>
        <test-method status="PASS" signature="verifySingleThreaded3()" name="verifySingleThreaded3" duration-ms="14" started-at="2011-05-26T14:44:27Z" finished-at="2011-05-26T14:44:27Z">
        </test-method>
        <test-method status="PASS" signature="verifySingleThreaded2()" name="verifySingleThreaded2" duration-ms="8" started-at="2011-05-26T14:44:27Z" finished-at="2011-05-26T14:44:27Z">
        </test-method>
        <test-method status="PASS" signature="methodSetUp()" name="methodSetUp" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:27Z" finished-at="2011-05-26T14:44:27Z">
        </test-method>
        <test-method status="PASS" signature="verifySequential3()" name="verifySequential3" duration-ms="11" started-at="2011-05-26T14:44:27Z" finished-at="2011-05-26T14:44:27Z">
        </test-method>
        <test-method status="PASS" signature="methodSetUp()" name="methodSetUp" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:27Z" finished-at="2011-05-26T14:44:27Z">
        </test-method>
        <test-method status="PASS" signature="methodSetUp()" name="methodSetUp" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:27Z" finished-at="2011-05-26T14:44:27Z">
        </test-method>
        <test-method status="PASS" signature="verifySingleThreaded1()" name="verifySingleThreaded1" duration-ms="6" started-at="2011-05-26T14:44:27Z" finished-at="2011-05-26T14:44:27Z">
        </test-method>
      </class>
      <class name="test.failedreporter.FailedReporterTest">
        <test-method status="PASS" signature="setUp()" name="setUp" is-config="true" duration-ms="1" started-at="2011-05-26T14:44:21Z" finished-at="2011-05-26T14:44:21Z">
        </test-method>
        <test-method status="PASS" signature="methodSetUp()" name="methodSetUp" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:21Z" finished-at="2011-05-26T14:44:21Z">
        </test-method>
        <test-method status="PASS" signature="failedAndSkippedMethodsShouldBeIncluded()" name="failedAndSkippedMethodsShouldBeIncluded" duration-ms="19" started-at="2011-05-26T14:44:21Z" finished-at="2011-05-26T14:44:21Z">
        </test-method>
        <test-method status="PASS" signature="tearDown()" name="tearDown" is-config="true" duration-ms="2" started-at="2011-05-26T14:44:21Z" finished-at="2011-05-26T14:44:21Z">
        </test-method>
        <test-method status="PASS" signature="methodSetUp()" name="methodSetUp" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:21Z" finished-at="2011-05-26T14:44:21Z">
        </test-method>
        <test-method status="PASS" signature="setUp()" name="setUp" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:21Z" finished-at="2011-05-26T14:44:21Z">
        </test-method>
        <test-method status="PASS" signature="failedMethodWithDataProviderShouldHaveInvocationNumbers()" name="failedMethodWithDataProviderShouldHaveInvocationNumbers" duration-ms="15" started-at="2011-05-26T14:44:21Z" finished-at="2011-05-26T14:44:21Z">
        </test-method>
        <test-method status="PASS" signature="tearDown()" name="tearDown" is-config="true" duration-ms="2" started-at="2011-05-26T14:44:21Z" finished-at="2011-05-26T14:44:21Z">
        </test-method>
      </class>
      <class name="test.configuration.ExternalConfigurationClass">
        <test-method status="PASS" signature="beforeTest()" name="beforeTest" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:20Z" finished-at="2011-05-26T14:44:20Z">
        </test-method>
      </class>
      <class name="test.issue78.NonPublicClassTest">
        <test-method status="PASS" signature="methodSetUp()" name="methodSetUp" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
        <test-method status="PASS" signature="dontThrowNPEForNonPublicTestClass()" name="dontThrowNPEForNonPublicTestClass" duration-ms="1" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
          <exception class="org.testng.TestNGException">
            <message>
              <![CDATA[
An error occurred while instantiating class test.issue78.NonPublicClass. Check to make sure it can be accessed/instantiated.]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.testng.TestNGException: 
An error occurred while instantiating class test.issue78.NonPublicClass. Check to make sure it can be accessed/instantiated.
	at org.testng.internal.ClassHelper.createInstance1(ClassHelper.java:390)
	at org.testng.internal.ClassHelper.createInstance(ClassHelper.java:284)
	at org.testng.internal.ClassImpl.getDefaultInstance(ClassImpl.java:109)
	at org.testng.internal.ClassImpl.getInstances(ClassImpl.java:182)
	at org.testng.internal.TestNGClassFinder.<init>(TestNGClassFinder.java:120)
	at org.testng.TestRunner.initMethods(TestRunner.java:397)
	at org.testng.TestRunner.init(TestRunner.java:228)
	at org.testng.TestRunner.init(TestRunner.java:198)
	at org.testng.TestRunner.<init>(TestRunner.java:154)
	at test.BaseTest$InternalTestRunnerFactory.newTestRunner(BaseTest.java:437)
	at org.testng.SuiteRunner$ProxyTestRunnerFactory.newTestRunner(SuiteRunner.java:556)
	at org.testng.SuiteRunner.init(SuiteRunner.java:154)
	at org.testng.SuiteRunner.<init>(SuiteRunner.java:108)
	at org.testng.SuiteRunner.<init>(SuiteRunner.java:93)
	at org.testng.SuiteRunner.<init>(SuiteRunner.java:84)
	at test.BaseTest.run(BaseTest.java:186)
	at test.issue78.NonPublicClassTest.dontThrowNPEForNonPublicTestClass(NonPublicClassTest.java:15)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:76)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:673)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:842)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1166)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
	at org.testng.TestRunner.runWorkers(TestRunner.java:1150)
	at org.testng.TestRunner.privateRun(TestRunner.java:752)
	at org.testng.TestRunner.run(TestRunner.java:603)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:329)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:324)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:286)
	at org.testng.SuiteRunner.run(SuiteRunner.java:235)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1049)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:974)
	at org.testng.TestNG.run(TestNG.java:905)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:74)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:93)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:101)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.apache.maven.surefire.booter.ProviderFactory$ClassLoaderProxy.invoke(ProviderFactory.java:103)
	at $Proxy0.invoke(Unknown Source)
	at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:145)
	at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcess(SurefireStarter.java:87)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:69)
]]>
            </full-stacktrace>
          </exception>
        </test-method>
      </class>
      <class name="test.configuration.BeforeClassThreadTest">
        <test-method status="PASS" signature="beforeClassMethodsShouldRunInParallel()" name="beforeClassMethodsShouldRunInParallel" duration-ms="2010" started-at="2011-05-26T14:44:27Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
      </class>
      <class name="test.superclass.MainTest">
        <test-method status="PASS" signature="methodSetUp()" name="methodSetUp" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:21Z" finished-at="2011-05-26T14:44:21Z">
        </test-method>
        <test-method status="PASS" signature="baseMethodIsCalledWithClassTest()" name="baseMethodIsCalledWithClassTest" duration-ms="4" started-at="2011-05-26T14:44:21Z" finished-at="2011-05-26T14:44:21Z">
        </test-method>
        <test-method status="PASS" signature="baseMethodIsCalledWithMethodTest()" name="baseMethodIsCalledWithMethodTest" duration-ms="5" started-at="2011-05-26T14:44:21Z" finished-at="2011-05-26T14:44:21Z">
        </test-method>
        <test-method status="PASS" signature="methodSetUp()" name="methodSetUp" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:21Z" finished-at="2011-05-26T14:44:21Z">
        </test-method>
      </class>
    </test>
    <test name="Regression1" duration-ms="220" started-at="2011-05-26T14:44:20Z" finished-at="2011-05-26T14:44:20Z">
      <class name="test.parameters.ParameterSample">
        <test-method status="PASS" signature="beforeTest(java.lang.String)" name="beforeTest" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:20Z" finished-at="2011-05-26T14:44:20Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Cedric]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="testNonExistentParameter(java.lang.String)" name="testNonExistentParameter" duration-ms="0" started-at="2011-05-26T14:44:20Z" finished-at="2011-05-26T14:44:20Z">
          <params>
            <param index="0">
              <value is-null="true"/>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="testSingleString(java.lang.String)" name="testSingleString" duration-ms="0" started-at="2011-05-26T14:44:20Z" finished-at="2011-05-26T14:44:20Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Cedric]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="beforeTest(java.lang.String)" name="beforeTest" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:20Z" finished-at="2011-05-26T14:44:20Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Cedric]]>
              </value>
            </param>
          </params>
        </test-method>
      </class>
      <class name="test.parameters.ParamInheritanceTest">
        <test-method status="PASS" signature="noNPEInCountingResults()" name="noNPEInCountingResults" duration-ms="5" started-at="2011-05-26T14:44:20Z" description="When verbose is set to &gt;1, TNG prints test results on CLI which are printed using SuiteResultCounts.calculateResultCounts(). This method has been throwing NPE because it&#039;s unable to find SuiteRunner in HashMap, because the list of parameters in SuiteRunner changed during execution. This test makes sure we dont run into any NPEs" finished-at="2011-05-26T14:44:20Z">
        </test-method>
        <test-method status="PASS" signature="parameterInheritanceAndOverriding()" name="parameterInheritanceAndOverriding" duration-ms="8" started-at="2011-05-26T14:44:20Z" description="Checks to make sure parameters are inherited and overridden properly" finished-at="2011-05-26T14:44:20Z">
        </test-method>
      </class>
      <class name="test.expectedexceptions.ExpectedExceptionsTest">
        <test-method status="PASS" signature="expectedExceptions()" name="expectedExceptions" duration-ms="23" started-at="2011-05-26T14:44:20Z" finished-at="2011-05-26T14:44:20Z">
        </test-method>
        <test-method status="PASS" signature="methodSetUp()" name="methodSetUp" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:20Z" finished-at="2011-05-26T14:44:20Z">
        </test-method>
        <test-method status="PASS" signature="expectedExceptionsDeprecatedSyntax()" name="expectedExceptionsDeprecatedSyntax" duration-ms="9" started-at="2011-05-26T14:44:20Z" finished-at="2011-05-26T14:44:20Z">
        </test-method>
        <test-method status="PASS" signature="methodSetUp()" name="methodSetUp" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:20Z" finished-at="2011-05-26T14:44:20Z">
        </test-method>
      </class>
      <class name="test.parameters.ParameterTest">
        <test-method status="PASS" signature="beforeMethodWithParameters()" name="beforeMethodWithParameters" duration-ms="4" started-at="2011-05-26T14:44:20Z" finished-at="2011-05-26T14:44:20Z">
        </test-method>
        <test-method status="PASS" signature="methodSetUp()" name="methodSetUp" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:20Z" finished-at="2011-05-26T14:44:20Z">
        </test-method>
        <test-method status="PASS" signature="stringSingle()" name="stringSingle" duration-ms="3" started-at="2011-05-26T14:44:20Z" finished-at="2011-05-26T14:44:20Z">
        </test-method>
        <test-method status="PASS" signature="methodSetUp()" name="methodSetUp" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:20Z" finished-at="2011-05-26T14:44:20Z">
        </test-method>
      </class>
      <class name="test.CtorCalledOnce">
        <test-method status="PASS" signature="testMethod2()" name="testMethod2" duration-ms="0" started-at="2011-05-26T14:44:20Z" finished-at="2011-05-26T14:44:20Z">
        </test-method>
        <test-method status="PASS" signature="testMethod3()" name="testMethod3" duration-ms="0" started-at="2011-05-26T14:44:20Z" finished-at="2011-05-26T14:44:20Z">
        </test-method>
        <test-method status="PASS" signature="testMethod1()" name="testMethod1" duration-ms="0" started-at="2011-05-26T14:44:20Z" finished-at="2011-05-26T14:44:20Z">
        </test-method>
        <test-method status="PASS" signature="afterTest()" name="afterTest" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:20Z" finished-at="2011-05-26T14:44:20Z">
        </test-method>
      </class>
      <class name="test.access.PrivateAccessConfigurationMethods">
        <test-method status="PASS" signature="baseProtectedConfBeforeMethod()" name="baseProtectedConfBeforeMethod" is-config="true" duration-ms="1" started-at="2011-05-26T14:44:20Z" finished-at="2011-05-26T14:44:20Z">
        </test-method>
        <test-method status="PASS" signature="baseDefaultConfBeforeMethod()" name="baseDefaultConfBeforeMethod" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:20Z" finished-at="2011-05-26T14:44:20Z">
        </test-method>
        <test-method status="PASS" signature="allAccessModifiersConfiguration()" name="allAccessModifiersConfiguration" duration-ms="0" started-at="2011-05-26T14:44:20Z" finished-at="2011-05-26T14:44:20Z">
        </test-method>
        <test-method status="PASS" signature="publicConfBeforeMethod()" name="publicConfBeforeMethod" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:20Z" finished-at="2011-05-26T14:44:20Z">
        </test-method>
        <test-method status="PASS" signature="defaultConfBeforeMethod()" name="defaultConfBeforeMethod" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:20Z" finished-at="2011-05-26T14:44:20Z">
        </test-method>
        <test-method status="PASS" signature="privateConfBeforeMethod()" name="privateConfBeforeMethod" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:20Z" finished-at="2011-05-26T14:44:20Z">
        </test-method>
        <test-method status="PASS" signature="protectedConfBeforeMethod()" name="protectedConfBeforeMethod" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:20Z" finished-at="2011-05-26T14:44:20Z">
        </test-method>
      </class>
      <class name="test.Test2">
        <test-method status="PASS" signature="methodSetUp()" name="methodSetUp" is-config="true" duration-ms="1" started-at="2011-05-26T14:44:20Z" finished-at="2011-05-26T14:44:20Z">
        </test-method>
        <test-method status="PASS" signature="correctSetup()" name="correctSetup" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:20Z" finished-at="2011-05-26T14:44:20Z">
        </test-method>
        <test-method status="PASS" signature="noGroups()" name="noGroups" duration-ms="16" started-at="2011-05-26T14:44:20Z" finished-at="2011-05-26T14:44:20Z">
        </test-method>
        <test-method status="PASS" signature="methodSetUp()" name="methodSetUp" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:20Z" finished-at="2011-05-26T14:44:20Z">
        </test-method>
        <test-method status="PASS" signature="correctSetup()" name="correctSetup" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:20Z" finished-at="2011-05-26T14:44:20Z">
        </test-method>
        <test-method status="PASS" signature="partialGroupsClass()" name="partialGroupsClass" duration-ms="11" started-at="2011-05-26T14:44:20Z" finished-at="2011-05-26T14:44:20Z">
        </test-method>
        <test-method status="PASS" signature="methodSetUp()" name="methodSetUp" is-config="true" duration-ms="1" started-at="2011-05-26T14:44:20Z" finished-at="2011-05-26T14:44:20Z">
        </test-method>
        <test-method status="PASS" signature="correctSetup()" name="correctSetup" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:20Z" finished-at="2011-05-26T14:44:20Z">
        </test-method>
        <test-method status="PASS" signature="partialGroupsMethod()" name="partialGroupsMethod" duration-ms="5" started-at="2011-05-26T14:44:20Z" finished-at="2011-05-26T14:44:20Z">
        </test-method>
        <test-method status="PASS" signature="methodSetUp()" name="methodSetUp" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:20Z" finished-at="2011-05-26T14:44:20Z">
        </test-method>
        <test-method status="PASS" signature="setUpWithGroups()" name="setUpWithGroups" duration-ms="1" started-at="2011-05-26T14:44:20Z" finished-at="2011-05-26T14:44:20Z">
        </test-method>
        <test-method status="PASS" signature="correctSetup()" name="correctSetup" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:20Z" finished-at="2011-05-26T14:44:20Z">
        </test-method>
      </class>
      <class name="test.expectedexceptions.WrappedExpectedExceptionTest">
        <test-method status="PASS" signature="testTimeout()" name="testTimeout" duration-ms="29" started-at="2011-05-26T14:44:20Z" finished-at="2011-05-26T14:44:20Z">
          <exception class="java.lang.IllegalStateException">
            <message>
              <![CDATA[expected failure]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalStateException: expected failure
	at test.expectedexceptions.WrappedExpectedExceptionTest.testTimeout(WrappedExpectedExceptionTest.java:11)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:76)
	at org.testng.internal.InvokeMethodRunnable.runOne(InvokeMethodRunnable.java:46)
	at org.testng.internal.InvokeMethodRunnable.run(InvokeMethodRunnable.java:37)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)
	at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
	at java.util.concurrent.FutureTask.run(FutureTask.java:138)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:680)
]]>
            </full-stacktrace>
          </exception>
        </test-method>
      </class>
      <class name="test.Test1">
        <test-method status="PASS" signature="methodSetUp()" name="methodSetUp" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:20Z" finished-at="2011-05-26T14:44:20Z">
        </test-method>
        <test-method status="PASS" signature="excludedGroups()" name="excludedGroups" duration-ms="33" started-at="2011-05-26T14:44:20Z" finished-at="2011-05-26T14:44:20Z">
        </test-method>
        <test-method status="PASS" signature="groupsOfGroupsSimple()" name="groupsOfGroupsSimple" duration-ms="14" started-at="2011-05-26T14:44:20Z" finished-at="2011-05-26T14:44:20Z">
        </test-method>
        <test-method status="PASS" signature="methodSetUp()" name="methodSetUp" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:20Z" finished-at="2011-05-26T14:44:20Z">
        </test-method>
        <test-method status="PASS" signature="groupsOfGroupsWithCycle()" name="groupsOfGroupsWithCycle" duration-ms="8" started-at="2011-05-26T14:44:20Z" finished-at="2011-05-26T14:44:20Z">
        </test-method>
        <test-method status="PASS" signature="methodSetUp()" name="methodSetUp" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:20Z" finished-at="2011-05-26T14:44:20Z">
        </test-method>
        <test-method status="PASS" signature="groupsOfGroupsWithIndirections()" name="groupsOfGroupsWithIndirections" duration-ms="20" started-at="2011-05-26T14:44:20Z" finished-at="2011-05-26T14:44:20Z">
        </test-method>
        <test-method status="PASS" signature="methodSetUp()" name="methodSetUp" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:20Z" finished-at="2011-05-26T14:44:20Z">
        </test-method>
        <test-method status="PASS" signature="methodSetUp()" name="methodSetUp" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:20Z" finished-at="2011-05-26T14:44:20Z">
        </test-method>
        <test-method status="PASS" signature="includedGroups()" name="includedGroups" duration-ms="15" started-at="2011-05-26T14:44:20Z" finished-at="2011-05-26T14:44:20Z">
        </test-method>
        <test-method status="PASS" signature="logger()" name="logger" duration-ms="1" started-at="2011-05-26T14:44:20Z" finished-at="2011-05-26T14:44:20Z">
        </test-method>
        <test-method status="PASS" signature="methodSetUp()" name="methodSetUp" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:20Z" finished-at="2011-05-26T14:44:20Z">
        </test-method>
        <test-method status="PASS" signature="regexp()" name="regexp" duration-ms="8" started-at="2011-05-26T14:44:20Z" finished-at="2011-05-26T14:44:20Z">
        </test-method>
        <test-method status="PASS" signature="methodSetUp()" name="methodSetUp" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:20Z" finished-at="2011-05-26T14:44:20Z">
        </test-method>
      </class>
    </test>
    <test name="Triangle" duration-ms="1" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
      <class name="test.triangle.Child2">
        <test-method status="PASS" signature="initBeforeTestClass()" name="initBeforeTestClass" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
        <test-method status="PASS" signature="child2()" name="child2" duration-ms="0" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
        <test-method status="PASS" signature="postAfterTestClass()" name="postAfterTestClass" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
      </class>
      <class name="test.triangle.Child1">
        <test-method status="PASS" signature="child1()" name="child1" duration-ms="0" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
        <test-method status="PASS" signature="postAfterTestClass()" name="postAfterTestClass" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
        <test-method status="PASS" signature="initBeforeTestClass()" name="initBeforeTestClass" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
        <test-method status="PASS" signature="child1a()" name="child1a" duration-ms="0" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
      </class>
    </test>
    <test name="InheritGroups" duration-ms="0" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:44Z">
      <class name="test.configuration.ConfigurationInheritGroupsSampleTest">
        <test-method status="PASS" signature="test1()" name="test1" duration-ms="0" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:44Z">
        </test-method>
        <test-method status="PASS" signature="setUp()" name="setUp" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:44Z">
        </test-method>
      </class>
    </test>
    <test name="DP" duration-ms="3032" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:44Z">
      <class name="test.dataprovider.ParallelDataProviderTest">
        <test-method status="PASS" signature="shouldNotThrowConcurrentModificationException()" name="shouldNotThrowConcurrentModificationException" duration-ms="2031" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:43Z">
        </test-method>
        <test-method status="PASS" signature="verifyData1(org.testng.ITestContext, java.lang.String, java.lang.Integer)" name="verifyData1" duration-ms="0" started-at="2011-05-26T14:44:43Z" finished-at="2011-05-26T14:44:43Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.testng.TestRunner@5651e202]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[B]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[37]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="verifyData1(org.testng.ITestContext, java.lang.String, java.lang.Integer)" name="verifyData1" duration-ms="0" started-at="2011-05-26T14:44:43Z" finished-at="2011-05-26T14:44:43Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.testng.TestRunner@5651e202]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Anne]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[37]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="verifyData1(org.testng.ITestContext, java.lang.String, java.lang.Integer)" name="verifyData1" duration-ms="0" started-at="2011-05-26T14:44:43Z" finished-at="2011-05-26T14:44:43Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.testng.TestRunner@5651e202]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Cedric]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[36]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="verifyData1(org.testng.ITestContext, java.lang.String, java.lang.Integer)" name="verifyData1" duration-ms="0" started-at="2011-05-26T14:44:43Z" finished-at="2011-05-26T14:44:43Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.testng.TestRunner@5651e202]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[A]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[36]]>
              </value>
            </param>
          </params>
        </test-method>
      </class>
    </test>
    <test name="Hookable" duration-ms="26" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:44Z">
      <class name="test.hook.HookableTest">
        <test-method status="PASS" signature="methodSetUp()" name="methodSetUp" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:44Z">
        </test-method>
        <test-method status="PASS" signature="bm()" name="bm" is-config="true" duration-ms="1" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:44Z">
        </test-method>
        <test-method status="PASS" signature="configurableFailure()" name="configurableFailure" duration-ms="4" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:44Z">
        </test-method>
        <test-method status="PASS" signature="methodSetUp()" name="methodSetUp" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:44Z">
        </test-method>
        <test-method status="PASS" signature="bm()" name="bm" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:44Z">
        </test-method>
        <test-method status="PASS" signature="configurableSuccess()" name="configurableSuccess" duration-ms="3" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:44Z">
        </test-method>
        <test-method status="PASS" signature="methodSetUp()" name="methodSetUp" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:44Z">
        </test-method>
        <test-method status="PASS" signature="configurableSuccessWithListener()" name="configurableSuccessWithListener" duration-ms="9" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:44Z">
        </test-method>
        <test-method status="PASS" signature="bm()" name="bm" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:44Z">
        </test-method>
        <test-method status="PASS" signature="hookFailure()" name="hookFailure" duration-ms="2" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:44Z">
        </test-method>
        <test-method status="PASS" signature="bm()" name="bm" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:44Z">
        </test-method>
        <test-method status="PASS" signature="methodSetUp()" name="methodSetUp" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:44Z">
        </test-method>
        <test-method status="PASS" signature="hookSuccess()" name="hookSuccess" duration-ms="2" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:44Z">
        </test-method>
        <test-method status="PASS" signature="bm()" name="bm" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:44Z">
        </test-method>
        <test-method status="PASS" signature="methodSetUp()" name="methodSetUp" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:44Z">
        </test-method>
        <test-method status="PASS" signature="hookSuccessWithListener()" name="hookSuccessWithListener" duration-ms="2" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:44Z">
        </test-method>
        <test-method status="PASS" signature="methodSetUp()" name="methodSetUp" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:44Z">
        </test-method>
        <test-method status="PASS" signature="bm()" name="bm" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:44Z">
        </test-method>
      </class>
    </test>
    <test name="Nested" duration-ms="0" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:44Z">
      <class name="test.nested.GarfTest">
        <test-method status="PASS" signature="testGarf()" name="testGarf" duration-ms="0" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:44Z">
        </test-method>
      </class>
    </test>
    <test name="InvocationCount" duration-ms="229" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
      <class name="test.invocationcount.FailedInvocationCountTest">
        <test-method status="PASS" signature="verifyAttributeShouldStop()" name="verifyAttributeShouldStop" duration-ms="46" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
        </test-method>
        <test-method status="PASS" signature="verifyGloballyShouldNotStop()" name="verifyGloballyShouldNotStop" duration-ms="24" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
        </test-method>
        <test-method status="PASS" signature="verifyGloballyShouldStop()" name="verifyGloballyShouldStop" duration-ms="21" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
        </test-method>
      </class>
      <class name="test.InvocationAndSuccessPercentageTest">
        <test-method status="PASS" signature="invocationCount()" name="invocationCount" duration-ms="5" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
        </test-method>
        <test-method status="PASS" signature="methodSetUp()" name="methodSetUp" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
        </test-method>
        <test-method status="PASS" signature="methodSetUp()" name="methodSetUp" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
        </test-method>
        <test-method status="PASS" signature="successPercentageThatSucceeds()" name="successPercentageThatSucceeds" duration-ms="5" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
        </test-method>
      </class>
      <class name="test.invocationcount.FirstAndLastTimeTest">
        <test-method status="PASS" signature="verifyDataProviderFalseFalse()" name="verifyDataProviderFalseFalse" duration-ms="26" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
        </test-method>
        <test-method status="PASS" signature="verifyDataProviderFalseTrue()" name="verifyDataProviderFalseTrue" duration-ms="17" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
        </test-method>
        <test-method status="PASS" signature="verifyDataProviderTrueFalse()" name="verifyDataProviderTrueFalse" duration-ms="15" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
        </test-method>
        <test-method status="PASS" signature="verifyDataProviderTrueTrue()" name="verifyDataProviderTrueTrue" duration-ms="13" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
        </test-method>
        <test-method status="PASS" signature="verifyInvocationCountFalseFalse()" name="verifyInvocationCountFalseFalse" duration-ms="17" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
        </test-method>
        <test-method status="PASS" signature="verifyInvocationCountFalseTrue()" name="verifyInvocationCountFalseTrue" duration-ms="14" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
        </test-method>
        <test-method status="PASS" signature="verifyInvocationCountTrueFalse()" name="verifyInvocationCountTrueFalse" duration-ms="13" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
        </test-method>
        <test-method status="PASS" signature="verifyInvocationCountTrueTrue()" name="verifyInvocationCountTrueTrue" duration-ms="12" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
        </test-method>
      </class>
    </test>
    <test name="JUnit" duration-ms="113" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:44Z">
      <class name="test.CommandLineTest">
        <test-method status="PASS" signature="junitParsing()" name="junitParsing" duration-ms="10" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:44Z">
        </test-method>
        <test-method status="PASS" signature="junitParsing2()" name="junitParsing2" duration-ms="19" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:44Z">
        </test-method>
        <test-method status="PASS" signature="suiteNameOverride()" name="suiteNameOverride" duration-ms="9" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:44Z">
        </test-method>
        <test-method status="PASS" signature="testMethodParameter()" name="testMethodParameter" duration-ms="50" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:44Z">
        </test-method>
        <test-method status="PASS" signature="testNameOverride()" name="testNameOverride" duration-ms="9" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:44Z">
        </test-method>
        <test-method status="PASS" signature="testUseDefaultListenersArgument()" name="testUseDefaultListenersArgument" duration-ms="4" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:44Z">
        </test-method>
      </class>
      <class name="test.JUnitTest1">
        <test-method status="PASS" signature="initJUnitFlag()" name="initJUnitFlag" is-config="true" duration-ms="0" depends-on-groups="initTest" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:44Z">
        </test-method>
        <test-method status="PASS" signature="methodsThatStartWithTest()" name="methodsThatStartWithTest" duration-ms="1" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:44Z">
        </test-method>
        <test-method status="PASS" signature="methodSetUp()" name="methodSetUp" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:44Z">
        </test-method>
        <test-method status="PASS" signature="methodsWithSetup()" name="methodsWithSetup" duration-ms="1" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:44Z">
        </test-method>
        <test-method status="PASS" signature="initJUnitFlag()" name="initJUnitFlag" is-config="true" duration-ms="0" depends-on-groups="initTest" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:44Z">
        </test-method>
        <test-method status="PASS" signature="methodSetUp()" name="methodSetUp" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:44Z">
        </test-method>
        <test-method status="PASS" signature="methodSetUp()" name="methodSetUp" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:44Z">
        </test-method>
        <test-method status="PASS" signature="initJUnitFlag()" name="initJUnitFlag" is-config="true" duration-ms="1" depends-on-groups="initTest" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:44Z">
        </test-method>
        <test-method status="PASS" signature="setNameShouldBeInvoked()" name="setNameShouldBeInvoked" duration-ms="1" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:44Z">
        </test-method>
        <test-method status="PASS" signature="initJUnitFlag()" name="initJUnitFlag" is-config="true" duration-ms="0" depends-on-groups="initTest" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:44Z">
        </test-method>
        <test-method status="PASS" signature="setUpFailingShouldCauseMethodsToBeSkipped()" name="setUpFailingShouldCauseMethodsToBeSkipped" duration-ms="2" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:44Z">
        </test-method>
        <test-method status="PASS" signature="methodSetUp()" name="methodSetUp" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:44Z">
        </test-method>
        <test-method status="PASS" signature="initJUnitFlag()" name="initJUnitFlag" is-config="true" duration-ms="0" depends-on-groups="initTest" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:44Z">
        </test-method>
        <test-method status="PASS" signature="testNewInstance()" name="testNewInstance" duration-ms="2" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:44Z">
        </test-method>
        <test-method status="PASS" signature="methodSetUp()" name="methodSetUp" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:44Z">
        </test-method>
        <test-method status="PASS" signature="methodSetUp()" name="methodSetUp" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:44Z">
        </test-method>
        <test-method status="PASS" signature="initJUnitFlag()" name="initJUnitFlag" is-config="true" duration-ms="0" depends-on-groups="initTest" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:44Z">
        </test-method>
        <test-method status="PASS" signature="testSuite()" name="testSuite" duration-ms="1" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:44Z">
        </test-method>
      </class>
    </test>
    <test name="Parameters for constructors" duration-ms="1" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
      <class name="test.ParameterConstructorTest">
        <test-method status="PASS" signature="verify()" name="verify" duration-ms="1" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
        </test-method>
      </class>
    </test>
    <test name="DataProvider" duration-ms="118" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
      <class name="test.dataprovider.InheritedDataProviderTest">
        <test-method status="PASS" signature="f(java.lang.String)" name="f" duration-ms="0" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[a]]>
              </value>
            </param>
          </params>
        </test-method>
      </class>
      <class name="test.dataprovider.TestInstanceTest">
        <test-method status="PASS" signature="f(int)" name="f on instance [A n:1]" duration-ms="0" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[43]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="f(int)" name="f on instance [A n:1]" duration-ms="0" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[42]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="f(int)" name="f on instance [A n:2]" duration-ms="0" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[43]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="f(int)" name="f on instance [A n:2]" duration-ms="0" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[42]]>
              </value>
            </param>
          </params>
        </test-method>
      </class>
      <class name="test.dataprovider.StaticDataProviderSampleTest">
        <test-method status="PASS" signature="verifyStatic(java.lang.String)" name="verifyStatic" duration-ms="1" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Cedric]]>
              </value>
            </param>
          </params>
        </test-method>
      </class>
      <class name="test.dataprovider.Sample1Test">
        <test-method status="PASS" signature="verifyCount()" name="verifyCount" duration-ms="0" started-at="2011-05-26T14:44:41Z" depends-on-methods="test.dataprovider.Sample1Test.verifyNames" finished-at="2011-05-26T14:44:41Z">
        </test-method>
        <test-method status="PASS" signature="verifyNames(java.lang.String, java.lang.Integer)" name="verifyNames" duration-ms="0" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Cedric]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[36]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="verifyNames(java.lang.String, java.lang.Integer)" name="verifyNames" duration-ms="0" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Anne Marie]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[37]]>
              </value>
            </param>
          </params>
        </test-method>
      </class>
      <class name="test.dataprovider.ClassTest">
        <test-method status="PASS" signature="methodSetUp()" name="methodSetUp" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
        </test-method>
        <test-method status="PASS" signature="includeMethodsOnly()" name="includeMethodsOnly" duration-ms="3" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
        </test-method>
      </class>
      <class name="test.dataprovider.InstanceDataProviderSampleTest">
        <test-method status="PASS" signature="beforeTest()" name="beforeTest" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
        </test-method>
        <test-method status="PASS" signature="f(java.lang.Integer)" name="f" duration-ms="0" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[431900535]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="afterTest()" name="afterTest" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
        </test-method>
        <test-method status="PASS" signature="afterTest()" name="afterTest" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
        </test-method>
        <test-method status="PASS" signature="beforeTest()" name="beforeTest" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
        </test-method>
        <test-method status="PASS" signature="f(java.lang.Integer)" name="f" duration-ms="0" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[462947888]]>
              </value>
            </param>
          </params>
        </test-method>
      </class>
      <class name="test.dataprovider.TestNG411Test">
        <test-method status="PASS" signature="verify()" name="verify" duration-ms="19" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
        </test-method>
      </class>
      <class name="test.dataprovider.BooleanTest">
        <test-method status="PASS" signature="doStuff(boolean)" name="doStuff" duration-ms="0" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="doStuff(boolean)" name="doStuff" duration-ms="0" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="verify()" name="verify" duration-ms="0" started-at="2011-05-26T14:44:41Z" depends-on-methods="test.dataprovider.BooleanTest.doStuff" finished-at="2011-05-26T14:44:41Z">
        </test-method>
      </class>
      <class name="test.dataprovider.DataProviderAsTest">
        <test-method status="PASS" signature="f()" name="f" duration-ms="0" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
        </test-method>
      </class>
      <class name="test.dataprovider.MethodTest">
        <test-method status="PASS" signature="test3(java.lang.String)" name="test3" duration-ms="0" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Cedric]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="test2(java.lang.String)" name="test2" duration-ms="0" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Cedric]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="multipleTestMethods()" name="multipleTestMethods" duration-ms="0" started-at="2011-05-26T14:44:41Z" depends-on-methods="test.dataprovider.MethodTest.test2, test.dataprovider.MethodTest.test3" finished-at="2011-05-26T14:44:41Z">
        </test-method>
        <test-method status="PASS" signature="test1(java.lang.String)" name="test1" duration-ms="0" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Alois]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="test1(java.lang.String)" name="test1" duration-ms="0" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Cedric]]>
              </value>
            </param>
          </params>
        </test-method>
      </class>
      <class name="test.dataprovider.ConfigurationAndDataProvidersTest">
        <test-method status="PASS" signature="setUpTest()" name="setUpTest" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
        </test-method>
        <test-method status="PASS" signature="setUp()" name="setUp" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
        </test-method>
        <test-method status="PASS" signature="verifyNames(java.lang.Object)" name="verifyNames" duration-ms="0" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Test]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="setUpClass()" name="setUpClass" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
        </test-method>
      </class>
      <class name="test.dataprovider.VarArgsDataProviderTest">
        <test-method status="PASS" signature="testWithTwoEntriesInTestToolWindow([Ljava.lang.String;)" name="testWithTwoEntriesInTestToolWindow" duration-ms="1" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.String;@7be84195]]>
              </value>
            </param>
          </params>
        </test-method>
      </class>
      <class name="test.dataprovider.FailingIterableDataProviderTest">
        <test-method status="PASS" signature="failingDataProvider()" name="failingDataProvider" duration-ms="2" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
        </test-method>
      </class>
      <class name="test.dataprovider.FailingDataProviderTest">
        <test-method status="PASS" signature="failingDataProvider()" name="failingDataProvider" duration-ms="1" started-at="2011-05-26T14:44:41Z" description="TESTNG-142: Exceptions in DataProvider are not reported as failed test" finished-at="2011-05-26T14:44:41Z">
        </test-method>
        <test-method status="PASS" signature="duplicateDataProviders()" name="duplicateDataProviders" duration-ms="2" started-at="2011-05-26T14:44:41Z" description="TESTNG-447: Abort when two data providers have the same name" finished-at="2011-05-26T14:44:41Z">
        </test-method>
      </class>
      <class name="test.dataprovider.UnnamedDataProviderTest">
        <test-method status="PASS" signature="doStuff(boolean)" name="doStuff" duration-ms="0" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="doStuff(boolean)" name="doStuff" duration-ms="0" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="verify()" name="verify" duration-ms="0" started-at="2011-05-26T14:44:41Z" depends-on-methods="test.dataprovider.UnnamedDataProviderTest.doStuff" finished-at="2011-05-26T14:44:41Z">
        </test-method>
      </class>
      <class name="test.dataprovider.FailedDataProviderTest">
        <test-method status="PASS" signature="allMethodsShouldBeInvoked()" name="allMethodsShouldBeInvoked" duration-ms="27" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
        </test-method>
        <test-method status="PASS" signature="methodSetUp()" name="methodSetUp" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
        </test-method>
        <test-method status="PASS" signature="init()" name="init" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
        </test-method>
        <test-method status="PASS" signature="methodSetUp()" name="methodSetUp" is-config="true" duration-ms="1" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
        </test-method>
        <test-method status="PASS" signature="failedDataProviderShouldCauseSkip()" name="failedDataProviderShouldCauseSkip" duration-ms="6" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
        </test-method>
        <test-method status="PASS" signature="init()" name="init" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
        </test-method>
      </class>
      <class name="test.dataprovider.TestContextTest">
        <test-method status="PASS" signature="verifyFive()" name="verifyFive" duration-ms="10" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
        </test-method>
        <test-method status="PASS" signature="verifySix()" name="verifySix" duration-ms="16" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
        </test-method>
        <test-method status="PASS" signature="verifyTen()" name="verifyTen" duration-ms="23" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
        </test-method>
      </class>
    </test>
    <test name="Groups Run" duration-ms="0" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:44Z">
      <class name="test.regression.groupsordering.A">
        <test-method status="PASS" signature="tearDown()" name="tearDown" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:44Z">
        </test-method>
        <test-method status="PASS" signature="setUp()" name="setUp" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:44Z">
        </test-method>
        <test-method status="PASS" signature="testA()" name="testA" duration-ms="0" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:44Z">
        </test-method>
      </class>
      <class name="test.regression.groupsordering.B">
        <test-method status="PASS" signature="testB()" name="testB" duration-ms="0" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:44Z">
        </test-method>
      </class>
    </test>
    <test name="Individual method" duration-ms="0" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
      <class name="test.IndividualMethodsTest">
        <test-method status="PASS" signature="setUp()" name="setUp" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
        </test-method>
        <test-method status="PASS" signature="testMethod()" name="testMethod" duration-ms="0" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
        </test-method>
      </class>
    </test>
    <test name="Utils" duration-ms="2" started-at="2011-05-26T14:44:45Z" finished-at="2011-05-26T14:44:45Z">
      <class name="org.testng.internal.UtilsTest">
        <test-method status="PASS" signature="escapeUnicode()" name="escapeUnicode" duration-ms="2" started-at="2011-05-26T14:44:45Z" finished-at="2011-05-26T14:44:45Z">
        </test-method>
      </class>
    </test>
    <test name="Factory" duration-ms="53" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
      <class name="test.factory.FactoryInSuperClassTest">
        <test-method status="PASS" signature="factoryInSuperClassShouldWork()" name="factoryInSuperClassShouldWork" duration-ms="2" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
      </class>
      <class name="test.factory.MyTest">
        <test-method status="PASS" signature="verifyThatTestMethodOnFactoryClassWasRun()" name="verifyThatTestMethodOnFactoryClassWasRun" duration-ms="0" depends-on-groups="testMethodOnFactoryClass" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
        <test-method status="PASS" signature="testMethod()" name="testMethod" duration-ms="0" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
        <test-method status="PASS" signature="testMethod()" name="testMethod" duration-ms="0" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
        <test-method status="PASS" signature="verifyThatTestMethodOnFactoryClassWasRun()" name="verifyThatTestMethodOnFactoryClassWasRun" duration-ms="0" depends-on-groups="testMethodOnFactoryClass" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
        <test-method status="PASS" signature="testMethod()" name="testMethod" duration-ms="0" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
        <test-method status="PASS" signature="verifyThatTestMethodOnFactoryClassWasRun()" name="verifyThatTestMethodOnFactoryClassWasRun" duration-ms="0" depends-on-groups="testMethodOnFactoryClass" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
      </class>
      <class name="test.factory.VerifyFactoryTest">
        <test-method status="PASS" signature="mainCheck()" name="mainCheck" duration-ms="0" depends-on-groups="first" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
      </class>
      <class name="test.factory.Sample2">
        <test-method status="PASS" signature="setUp()" name="setUp" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
        <test-method status="PASS" signature="setUp()" name="setUp" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
        <test-method status="PASS" signature="tearDown()" name="tearDown" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
        <test-method status="PASS" signature="setUp()" name="setUp" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
        <test-method status="PASS" signature="testInputImages()" name="testInputImages" duration-ms="0" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
        <test-method status="PASS" signature="testImages()" name="testImages" duration-ms="1" started-at="2011-05-26T14:44:29Z" depends-on-methods="test.factory.Sample2.testInputImages" finished-at="2011-05-26T14:44:29Z">
        </test-method>
        <test-method status="PASS" signature="testInputImages()" name="testInputImages" duration-ms="0" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
        <test-method status="PASS" signature="tearDown()" name="tearDown" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
        <test-method status="PASS" signature="tearDown()" name="tearDown" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
        <test-method status="PASS" signature="tearDown()" name="tearDown" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
        <test-method status="PASS" signature="testImages()" name="testImages" duration-ms="0" started-at="2011-05-26T14:44:29Z" depends-on-methods="test.factory.Sample2.testInputImages" finished-at="2011-05-26T14:44:29Z">
        </test-method>
        <test-method status="PASS" signature="setUp()" name="setUp" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
      </class>
      <class name="test.factory.FactoryOrderMainTest">
        <test-method status="PASS" signature="factoriesShouldBeInvokedInTheOrderOfCreation()" name="factoriesShouldBeInvokedInTheOrderOfCreation" duration-ms="5" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
      </class>
      <class name="test.factory.FactoryWithDataProviderTest">
        <test-method status="PASS" signature="verifyDataProvider()" name="verifyDataProvider" duration-ms="12" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
      </class>
      <class name="test.factory.FactoryDataProviderTest">
        <test-method status="PASS" signature="factoryWithLocalDataProvider()" name="factoryWithLocalDataProvider" duration-ms="3" started-at="2011-05-26T14:44:29Z" description="Test @Factory(dataProvider) on a local static data provider" finished-at="2011-05-26T14:44:29Z">
        </test-method>
        <test-method status="PASS" signature="factoryWithNonStaticDataProvider()" name="factoryWithNonStaticDataProvider" duration-ms="3" started-at="2011-05-26T14:44:29Z" description="Test @Factory(dataProvider) on a non static data provider with no arg ctor" finished-at="2011-05-26T14:44:29Z">
        </test-method>
        <test-method status="PASS" signature="factoryWithNonStaticDataProviderShouldFail()" name="factoryWithNonStaticDataProviderShouldFail" duration-ms="1" started-at="2011-05-26T14:44:29Z" description="Should fail because the data provider is not static" finished-at="2011-05-26T14:44:29Z">
          <exception class="org.testng.TestNGException">
            <message>
              <![CDATA[
Can't invoke public java.lang.Object[][] test.factory.FactoryDataProviderStaticSampleErrorTest.dp(): either make it static or add a no-args constructor to your class]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.testng.TestNGException: 
Can't invoke public java.lang.Object[][] test.factory.FactoryDataProviderStaticSampleErrorTest.dp(): either make it static or add a no-args constructor to your class
	at org.testng.internal.Utils.checkInstanceOrStatic(Utils.java:773)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:36)
	at org.testng.internal.MethodInvocationHelper.invokeDataProvider(MethodInvocationHelper.java:123)
	at org.testng.internal.Parameters.handleParameters(Parameters.java:412)
	at org.testng.internal.FactoryMethod.invoke(FactoryMethod.java:64)
	at org.testng.internal.TestNGClassFinder.<init>(TestNGClassFinder.java:140)
	at org.testng.TestRunner.initMethods(TestRunner.java:397)
	at org.testng.TestRunner.init(TestRunner.java:228)
	at org.testng.TestRunner.init(TestRunner.java:198)
	at org.testng.TestRunner.<init>(TestRunner.java:147)
	at org.testng.SuiteRunner$DefaultTestRunnerFactory.newTestRunner(SuiteRunner.java:520)
	at org.testng.SuiteRunner.init(SuiteRunner.java:154)
	at org.testng.SuiteRunner.<init>(SuiteRunner.java:108)
	at org.testng.TestNG.createSuiteRunner(TestNG.java:1126)
	at org.testng.TestNG.createSuiteRunners(TestNG.java:1113)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:965)
	at org.testng.TestNG.run(TestNG.java:905)
	at test.factory.FactoryDataProviderTest.runTest(FactoryDataProviderTest.java:41)
	at test.factory.FactoryDataProviderTest.factoryWithNonStaticDataProviderShouldFail(FactoryDataProviderTest.java:34)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:76)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:673)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:842)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1166)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
	at org.testng.TestRunner.runWorkers(TestRunner.java:1150)
	at org.testng.TestRunner.privateRun(TestRunner.java:752)
	at org.testng.TestRunner.run(TestRunner.java:603)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:329)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:324)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:286)
	at org.testng.SuiteRunner.run(SuiteRunner.java:235)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1049)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:974)
	at org.testng.TestNG.run(TestNG.java:905)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:74)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:93)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:101)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.apache.maven.surefire.booter.ProviderFactory$ClassLoaderProxy.invoke(ProviderFactory.java:103)
	at $Proxy0.invoke(Unknown Source)
	at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:145)
	at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcess(SurefireStarter.java:87)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:69)
]]>
            </full-stacktrace>
          </exception>
        </test-method>
        <test-method status="PASS" signature="factoryWithStaticDataProvider()" name="factoryWithStaticDataProvider" duration-ms="2" started-at="2011-05-26T14:44:29Z" description="Test @Factory(dataProvider) on a data provider in another class" finished-at="2011-05-26T14:44:29Z">
        </test-method>
      </class>
      <class name="test.factory.classconf.XClassOrderWithFactoryTest">
        <test-method status="PASS" signature="testBeforeAfterClassInvocationsWithFactory()" name="testBeforeAfterClassInvocationsWithFactory" duration-ms="16" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
      </class>
      <class name="test.factory.FactoryTest2">
        <test-method status="PASS" signature="testInt()" name="testInt on instance [FactoryTest2 43]" duration-ms="0" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
        <test-method status="PASS" signature="testInt()" name="testInt on instance [FactoryTest2 42]" duration-ms="0" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
      </class>
      <class name="test.factory.FactoryInterleavingTest">
        <test-method status="PASS" signature="methodsShouldBeInterleaved()" name="methodsShouldBeInterleaved" duration-ms="4" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
      </class>
      <class name="test.factory.FactoryInSeparateClass">
        <test-method status="PASS" signature="beforeTest()" name="beforeTest" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
        <test-method status="PASS" signature="checkSum()" name="checkSum" duration-ms="0" depends-on-groups="MyTest" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
      </class>
      <class name="test.factory.TestClassAnnotationTest">
        <test-method status="PASS" signature="testOne()" name="testOne" duration-ms="0" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
        <test-method status="PASS" signature="verify()" name="verify" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
      </class>
      <class name="test.factory.VerifyFactoryWithInstanceInfoTest">
        <test-method status="PASS" signature="mainCheck()" name="mainCheck" duration-ms="0" depends-on-groups="first" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
      </class>
      <class name="test.factory.FactoryFailureTest">
        <test-method status="PASS" signature="factoryThrowingShouldNotRunTests()" name="factoryThrowingShouldNotRunTests" duration-ms="1" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
      </class>
      <class name="test.factory.FactoryWithInstanceInfoTest2">
        <test-method status="PASS" signature="testInt()" name="testInt" duration-ms="1" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
        <test-method status="PASS" signature="testInt()" name="testInt" duration-ms="0" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
      </class>
    </test>
    <test name="Exclusion" duration-ms="30" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
      <class name="test.Test2">
        <test-method status="PASS" signature="methodSetUp()" name="methodSetUp" is-config="true" duration-ms="1" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
        <test-method status="PASS" signature="correctSetup()" name="correctSetup" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
        <test-method status="PASS" signature="noGroups()" name="noGroups" duration-ms="17" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
        <test-method status="PASS" signature="correctSetup()" name="correctSetup" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
        <test-method status="PASS" signature="methodSetUp()" name="methodSetUp" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
        <test-method status="PASS" signature="partialGroupsClass()" name="partialGroupsClass" duration-ms="6" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
        <test-method status="PASS" signature="partialGroupsMethod()" name="partialGroupsMethod" duration-ms="4" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
        <test-method status="PASS" signature="methodSetUp()" name="methodSetUp" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
        <test-method status="PASS" signature="correctSetup()" name="correctSetup" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
        <test-method status="PASS" signature="correctSetup()" name="correctSetup" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
        <test-method status="PASS" signature="setUpWithGroups()" name="setUpWithGroups" duration-ms="1" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
        <test-method status="PASS" signature="methodSetUp()" name="methodSetUp" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
      </class>
    </test>
    <test name="Method inheritance" duration-ms="2" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
      <class name="test.inheritance.DChild_2">
        <test-method status="PASS" signature="beforeTest()" name="beforeTest" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
        </test-method>
        <test-method status="PASS" signature="initApplication()" name="initApplication" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
        </test-method>
        <test-method status="PASS" signature="initDialog()" name="initDialog" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
        </test-method>
        <test-method status="PASS" signature="tearDownDialog()" name="tearDownDialog" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
        </test-method>
        <test-method status="PASS" signature="test()" name="test" duration-ms="0" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
        </test-method>
        <test-method status="PASS" signature="tearDownDialog2()" name="tearDownDialog2" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
        </test-method>
        <test-method status="PASS" signature="initDialog2()" name="initDialog2" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
        </test-method>
        <test-method status="PASS" signature="tearDownApplication()" name="tearDownApplication" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
        </test-method>
      </class>
      <class name="test.inheritance.VerifyTest">
        <test-method status="PASS" signature="verify()" name="verify" duration-ms="2" depends-on-groups="before" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
        </test-method>
      </class>
    </test>
    <test name="Guice" duration-ms="1" started-at="2011-05-26T14:44:45Z" finished-at="2011-05-26T14:44:45Z">
      <class name="test.guice.GuiceInheritanceTest">
        <test-method status="PASS" signature="singletonShouldWork()" name="singletonShouldWork" duration-ms="0" started-at="2011-05-26T14:44:45Z" finished-at="2011-05-26T14:44:45Z">
        </test-method>
      </class>
      <class name="test.guice.GuiceModuleFactoryTest">
        <test-method status="PASS" signature="singletonShouldWork()" name="singletonShouldWork" duration-ms="0" started-at="2011-05-26T14:44:45Z" finished-at="2011-05-26T14:44:45Z">
        </test-method>
      </class>
      <class name="test.guice.GuiceTest">
        <test-method status="PASS" signature="singletonShouldWork()" name="singletonShouldWork" duration-ms="0" started-at="2011-05-26T14:44:45Z" finished-at="2011-05-26T14:44:45Z">
        </test-method>
      </class>
    </test>
    <test name="Listener invokers" duration-ms="1" started-at="2011-05-26T14:44:45Z" finished-at="2011-05-26T14:44:45Z">
      <class name="org.testng.internal.invokers.InvokedMethodListenerSubtypeTest">
        <test-method status="PASS" signature="testFromListenerUsingExtendedListenerInstance()" name="testFromListenerUsingExtendedListenerInstance" duration-ms="1" started-at="2011-05-26T14:44:45Z" finished-at="2011-05-26T14:44:45Z">
        </test-method>
        <test-method status="PASS" signature="testFromListenerUsingSimpleListenerInstance()" name="testFromListenerUsingSimpleListenerInstance" duration-ms="0" started-at="2011-05-26T14:44:45Z" finished-at="2011-05-26T14:44:45Z">
        </test-method>
      </class>
    </test>
    <test name="Inheritance" duration-ms="2" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
      <class name="test.inheritance.ClassScopeTest">
        <test-method status="PASS" signature="setVerify()" name="setVerify" duration-ms="1" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
        <test-method status="PASS" signature="verify()" name="verify" duration-ms="0" started-at="2011-05-26T14:44:29Z" depends-on-methods="test.inheritance.ClassScopeTest.setVerify" finished-at="2011-05-26T14:44:29Z">
        </test-method>
      </class>
      <class name="test.SampleInheritance">
        <test-method status="PASS" signature="inheritedMethodsWereCalledInOrder()" name="inheritedMethodsWereCalledInOrder" duration-ms="0" depends-on-groups="inheritedTestMethod" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
        <test-method status="PASS" signature="configuration2()" name="configuration2" is-config="true" duration-ms="0" depends-on-groups="configuration1" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
        <test-method status="PASS" signature="baseConfiguration()" name="baseConfiguration" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
        <test-method status="PASS" signature="configuration0()" name="configuration0" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
        <test-method status="PASS" signature="configuration1()" name="configuration1" is-config="true" duration-ms="0" depends-on-groups="configuration0" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
        <test-method status="PASS" signature="baseMethod()" name="baseMethod" duration-ms="0" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
        <test-method status="PASS" signature="configurationsWereCalledInOrder()" name="configurationsWereCalledInOrder" duration-ms="0" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
        <test-method status="PASS" signature="testBooleans()" name="testBooleans" duration-ms="0" depends-on-groups="inheritedTestMethod" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
      </class>
    </test>
    <test name="Excluded methods" duration-ms="1" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
      <class name="test.Exclude">
        <test-method status="PASS" signature="included1()" name="included1" duration-ms="0" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
        </test-method>
        <test-method status="PASS" signature="included2()" name="included2" duration-ms="0" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
        </test-method>
        <test-method status="PASS" signature="verify()" name="verify" duration-ms="0" depends-on-groups="group1" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
        </test-method>
      </class>
    </test>
    <test name="Method selectors" duration-ms="219" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
      <class name="test.methodselectors.BeanShellTest">
        <test-method status="PASS" signature="onlyGroup1()" name="onlyGroup1" duration-ms="90" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
        </test-method>
        <test-method status="PASS" signature="methodSetUp()" name="methodSetUp" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
        </test-method>
      </class>
      <class name="test.methodselectors.MethodSelectorInSuiteTest">
        <test-method status="PASS" signature="setup()" name="setup" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
        </test-method>
        <test-method status="PASS" signature="fileOnCommandLine()" name="fileOnCommandLine" duration-ms="10" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
        </test-method>
        <test-method status="PASS" signature="programmaticXmlSuite()" name="programmaticXmlSuite" duration-ms="2" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
        </test-method>
        <test-method status="PASS" signature="setup()" name="setup" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
        </test-method>
        <test-method status="PASS" signature="xmlXmlSuite()" name="xmlXmlSuite" duration-ms="1" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
        </test-method>
        <test-method status="PASS" signature="setup()" name="setup" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
        </test-method>
      </class>
      <class name="test.methodselectors.MethodSelectorTest">
        <test-method status="PASS" signature="methodSetUp()" name="methodSetUp" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
        </test-method>
        <test-method status="PASS" signature="greaterThanPriorityTest1Test2()" name="greaterThanPriorityTest1Test2" duration-ms="2" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
        </test-method>
        <test-method status="PASS" signature="lessThanPriorityAllTests()" name="lessThanPriorityAllTests" duration-ms="2" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
        </test-method>
        <test-method status="PASS" signature="methodSetUp()" name="methodSetUp" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
        </test-method>
        <test-method status="PASS" signature="methodSetUp()" name="methodSetUp" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
        </test-method>
        <test-method status="PASS" signature="lessThanPriorityTest1Test()" name="lessThanPriorityTest1Test" duration-ms="2" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
        </test-method>
        <test-method status="PASS" signature="negativePriorityAllGroups()" name="negativePriorityAllGroups" duration-ms="3" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
        </test-method>
        <test-method status="PASS" signature="methodSetUp()" name="methodSetUp" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
        </test-method>
        <test-method status="PASS" signature="negativePriorityGroup2()" name="negativePriorityGroup2" duration-ms="2" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
        </test-method>
        <test-method status="PASS" signature="methodSetUp()" name="methodSetUp" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
        </test-method>
      </class>
      <class name="test.methodselectors.CommandLineTest">
        <test-method status="PASS" signature="setup()" name="setup" is-config="true" duration-ms="1" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
        </test-method>
        <test-method status="PASS" signature="commandLineGreaterThanPriorityTest1Test2()" name="commandLineGreaterThanPriorityTest1Test2" duration-ms="11" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
        </test-method>
        <test-method status="PASS" signature="setup()" name="setup" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
        </test-method>
        <test-method status="PASS" signature="commandLineLessThanPriorityAllTests()" name="commandLineLessThanPriorityAllTests" duration-ms="11" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
        </test-method>
        <test-method status="PASS" signature="setup()" name="setup" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
        </test-method>
        <test-method status="PASS" signature="commandLineLessThanPriorityTest1Test()" name="commandLineLessThanPriorityTest1Test" duration-ms="10" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
        </test-method>
        <test-method status="PASS" signature="commandLineMultipleSelectors()" name="commandLineMultipleSelectors" duration-ms="11" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
        </test-method>
        <test-method status="PASS" signature="setup()" name="setup" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
        </test-method>
        <test-method status="PASS" signature="setup()" name="setup" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
        </test-method>
        <test-method status="PASS" signature="commandLineNegativePriorityAllGroups()" name="commandLineNegativePriorityAllGroups" duration-ms="16" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
        </test-method>
        <test-method status="PASS" signature="setup()" name="setup" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
        </test-method>
        <test-method status="PASS" signature="commandLineNegativePriorityGroup2()" name="commandLineNegativePriorityGroup2" duration-ms="10" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
        </test-method>
        <test-method status="PASS" signature="setup()" name="setup" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
        </test-method>
        <test-method status="PASS" signature="commandLineNoTest1Selector()" name="commandLineNoTest1Selector" duration-ms="10" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
        </test-method>
        <test-method status="PASS" signature="setup()" name="setup" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
        </test-method>
        <test-method status="PASS" signature="commandLineTestWithXmlFile()" name="commandLineTestWithXmlFile" duration-ms="20" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
        </test-method>
      </class>
    </test>
    <test name="BeforeGroups-AfterGroups-1" duration-ms="14" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:44Z">
      <class name="test.configuration.ConfigurationGroups2SampleTest">
        <test-method status="PASS" signature="g1()" name="g1" duration-ms="0" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:44Z">
        </test-method>
        <test-method status="PASS" signature="before1()" name="before1" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:44Z">
        </test-method>
        <test-method status="PASS" signature="fa()" name="fa" duration-ms="0" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:44Z">
        </test-method>
        <test-method status="PASS" signature="f1()" name="f1" duration-ms="0" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:44Z">
        </test-method>
        <test-method status="PASS" signature="verify()" name="verify" duration-ms="0" depends-on-groups="cg2-1, cg2-a" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:44Z">
        </test-method>
      </class>
      <class name="test.configuration.ConfigurationGroups7SampleTest">
        <test-method status="PASS" signature="testSomethingMore()" name="testSomethingMore" duration-ms="0" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:44Z">
        </test-method>
        <test-method status="PASS" signature="verify()" name="verify" duration-ms="0" depends-on-groups="A" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:44Z">
        </test-method>
        <test-method status="PASS" signature="initA()" name="initA" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:44Z">
        </test-method>
        <test-method status="PASS" signature="testSomething()" name="testSomething" duration-ms="0" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:44Z">
        </test-method>
        <test-method status="PASS" signature="cleanUpA()" name="cleanUpA" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:44Z">
        </test-method>
      </class>
      <class name="test.configuration.ConfigurationGroups5SampleTest">
        <test-method status="PASS" signature="after()" name="after" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:44Z">
        </test-method>
        <test-method status="PASS" signature="run1()" name="run1" duration-ms="0" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:44Z">
        </test-method>
        <test-method status="PASS" signature="verify()" name="verify" duration-ms="0" depends-on-groups="cg5-2, cg5-1" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:44Z">
        </test-method>
        <test-method status="PASS" signature="after()" name="after" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:44Z">
        </test-method>
        <test-method status="PASS" signature="run2()" name="run2" duration-ms="0" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:44Z">
        </test-method>
        <test-method status="PASS" signature="f()" name="f" duration-ms="1" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:44Z">
        </test-method>
      </class>
      <class name="test.configuration.ConfigurationGroups1SampleTest">
        <test-method status="PASS" signature="before1()" name="before1" is-config="true" duration-ms="8" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:44Z">
        </test-method>
        <test-method status="PASS" signature="f1()" name="f1" duration-ms="1" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:44Z">
        </test-method>
        <test-method status="PASS" signature="verify()" name="verify" duration-ms="0" depends-on-groups="cg1-a, cg1-1" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:44Z">
        </test-method>
        <test-method status="PASS" signature="fa()" name="fa" duration-ms="0" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:44Z">
        </test-method>
      </class>
      <class name="test.configuration.ConfigurationGroups6SampleTest">
        <test-method status="PASS" signature="run1()" name="run1" duration-ms="0" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:44Z">
        </test-method>
        <test-method status="PASS" signature="run2()" name="run2" duration-ms="1" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:44Z">
        </test-method>
        <test-method status="PASS" signature="verify()" name="verify" duration-ms="0" depends-on-groups="cg6-1" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:44Z">
        </test-method>
        <test-method status="PASS" signature="after()" name="after" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:44Z">
        </test-method>
        <test-method status="PASS" signature="f()" name="f" duration-ms="0" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:44Z">
        </test-method>
      </class>
      <class name="test.configuration.ConfigurationGroups4SampleTest">
        <test-method status="PASS" signature="run()" name="run" duration-ms="0" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:44Z">
        </test-method>
        <test-method status="PASS" signature="after1()" name="after1" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:44Z">
        </test-method>
        <test-method status="PASS" signature="verify()" name="verify" duration-ms="0" depends-on-groups="cg4-1" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:44Z">
        </test-method>
        <test-method status="PASS" signature="f()" name="f" duration-ms="0" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:44Z">
        </test-method>
      </class>
      <class name="test.configuration.ConfigurationGroups3SampleTest">
        <test-method status="PASS" signature="verify()" name="verify" duration-ms="0" depends-on-groups="cg34-1, cg34-a" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:44Z">
        </test-method>
        <test-method status="PASS" signature="before1()" name="before1" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:44Z">
        </test-method>
        <test-method status="PASS" signature="f1()" name="f1" duration-ms="0" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:44Z">
        </test-method>
        <test-method status="PASS" signature="fa()" name="fa" duration-ms="0" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:44Z">
        </test-method>
        <test-method status="PASS" signature="anotherBefore1()" name="anotherBefore1" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:44Z">
        </test-method>
      </class>
    </test>
    <test name="BeforeGroups-AfterGroups-2" duration-ms="0" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:44Z">
      <class name="test.configuration.ConfigurationGroups8SampleTest">
        <test-method status="PASS" signature="cleanUpA()" name="cleanUpA" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:44Z">
        </test-method>
        <test-method status="PASS" signature="verify()" name="verify" duration-ms="0" depends-on-groups="A" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:44Z">
        </test-method>
        <test-method status="PASS" signature="testSomething()" name="testSomething" duration-ms="0" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:44Z">
        </test-method>
        <test-method status="PASS" signature="testSomethingMore()" name="testSomethingMore" duration-ms="0" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:44Z">
        </test-method>
        <test-method status="PASS" signature="cleanUpA()" name="cleanUpA" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:44Z">
        </test-method>
        <test-method status="PASS" signature="cleanUpA()" name="cleanUpA" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:44Z">
        </test-method>
      </class>
    </test>
    <test name="Parameters in init 1" duration-ms="0" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
      <class name="test.configuration.ConfigurationWithParameters">
        <test-method status="PASS" signature="testMethod(java.lang.String)" name="testMethod" duration-ms="0" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[value1]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="testInit(java.lang.String)" name="testInit" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[value1]]>
              </value>
            </param>
          </params>
        </test-method>
      </class>
    </test>
    <test name="Parameters in init 2" duration-ms="1" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
      <class name="test.configuration.ConfigurationWithParameters">
        <test-method status="PASS" signature="testMethod(java.lang.String)" name="testMethod" duration-ms="0" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[value2]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="testInit(java.lang.String)" name="testInit" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[value2]]>
              </value>
            </param>
          </params>
        </test-method>
      </class>
    </test>
    <test name="Class Run" duration-ms="0" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:44Z">
      <class name="test.regression.groupsordering.A">
        <test-method status="PASS" signature="setUp()" name="setUp" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:44Z">
        </test-method>
        <test-method status="PASS" signature="tearDown()" name="tearDown" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:44Z">
        </test-method>
        <test-method status="PASS" signature="testA()" name="testA" duration-ms="0" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:44Z">
        </test-method>
      </class>
      <class name="test.regression.groupsordering.B">
        <test-method status="PASS" signature="testB()" name="testB" duration-ms="0" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:44Z">
        </test-method>
      </class>
    </test>
    <test name="External group invocation" duration-ms="1" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:44Z">
      <class name="test.groupinvocation.GroupConfiguration">
        <test-method status="PASS" signature="afterGroups()" name="afterGroups" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:44Z">
        </test-method>
        <test-method status="PASS" signature="beforeGroups()" name="beforeGroups" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:44Z">
        </test-method>
      </class>
      <class name="test.groupinvocation.DummyTest">
        <test-method status="PASS" signature="testA()" name="testA" duration-ms="0" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:44Z">
        </test-method>
        <test-method status="PASS" signature="testAB()" name="testAB" duration-ms="0" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:44Z">
        </test-method>
        <test-method status="PASS" signature="checkInvocations()" name="checkInvocations" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:44Z">
        </test-method>
      </class>
    </test>
    <test name="Dependents" duration-ms="74" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
      <class name="test.dependent.SampleDependentConfigurationMethods">
        <test-method status="PASS" signature="firstInvocation()" name="firstInvocation" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:29Z" depends-on-methods="test.dependent.SampleDependentConfigurationMethods.createInstance" finished-at="2011-05-26T14:44:29Z">
        </test-method>
        <test-method status="PASS" signature="createInstance()" name="createInstance" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
        <test-method status="PASS" signature="verifyDependents()" name="verifyDependents" duration-ms="0" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
      </class>
      <class name="test.dependent.ImplicitGroupInclusionTest">
        <test-method status="PASS" signature="methodSetUp()" name="methodSetUp" is-config="true" duration-ms="1" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
        <test-method status="PASS" signature="verifyImplicitGroupInclusion()" name="verifyImplicitGroupInclusion" duration-ms="3" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
        <test-method status="PASS" signature="verifyImplicitGroupInclusion2()" name="verifyImplicitGroupInclusion2" duration-ms="4" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
        <test-method status="PASS" signature="methodSetUp()" name="methodSetUp" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
        <test-method status="PASS" signature="verifyImplicitGroupInclusion3()" name="verifyImplicitGroupInclusion3" duration-ms="3" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
        <test-method status="PASS" signature="methodSetUp()" name="methodSetUp" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
        <test-method status="PASS" signature="methodSetUp()" name="methodSetUp" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
        <test-method status="PASS" signature="verifyImplicitGroupInclusion4()" name="verifyImplicitGroupInclusion4" duration-ms="4" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
        <test-method status="PASS" signature="methodSetUp()" name="methodSetUp" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
        <test-method status="PASS" signature="verifyImplicitMethodInclusion()" name="verifyImplicitMethodInclusion" duration-ms="2" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
      </class>
      <class name="test.dependent.ClassWide2Test">
        <test-method status="PASS" signature="m2()" name="m2" duration-ms="0" started-at="2011-05-26T14:44:29Z" depends-on-methods="test.dependent.ClassWide1Test.m1" finished-at="2011-05-26T14:44:29Z">
        </test-method>
      </class>
      <class name="test.dependent.SampleDependentMethods3">
        <test-method status="PASS" signature="one()" name="one" duration-ms="0" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
        <test-method status="PASS" signature="one(java.lang.String)" name="one" duration-ms="0" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Cedric]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="secondA()" name="secondA" duration-ms="0" started-at="2011-05-26T14:44:29Z" depends-on-methods="test.dependent.SampleDependentMethods3.one" finished-at="2011-05-26T14:44:29Z">
        </test-method>
        <test-method status="PASS" signature="tearDown()" name="tearDown" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
      </class>
      <class name="test.dependsongroup.DependsOnGroupsTest">
        <test-method status="PASS" signature="methodsShouldBeGroupedByClasses()" name="methodsShouldBeGroupedByClasses" duration-ms="4" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
      </class>
      <class name="test.dependent.ClassWide1Test">
        <test-method status="PASS" signature="init()" name="init" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
        <test-method status="PASS" signature="m1()" name="m1" duration-ms="0" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
      </class>
      <class name="test.dependent.SampleDependentMethods2">
        <test-method status="PASS" signature="oneB()" name="oneB" duration-ms="0" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
        <test-method status="PASS" signature="oneA()" name="oneA" duration-ms="0" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
        <test-method status="PASS" signature="secondA()" name="secondA" duration-ms="0" depends-on-groups="one" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
        <test-method status="PASS" signature="thirdA()" name="thirdA" duration-ms="0" started-at="2011-05-26T14:44:29Z" depends-on-methods="test.dependent.SampleDependentMethods2.secondA" finished-at="2011-05-26T14:44:29Z">
        </test-method>
        <test-method status="PASS" signature="canBeRunAnytime()" name="canBeRunAnytime" duration-ms="1" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
        <test-method status="PASS" signature="tearDown()" name="tearDown" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
      </class>
      <class name="test.dependent.DependsOnProtectedMethodTest">
        <test-method status="PASS" signature="before()" name="before" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:29Z" depends-on-methods="test.dependent.DependsOnProtectedMethodTest.before2" finished-at="2011-05-26T14:44:29Z">
        </test-method>
        <test-method status="PASS" signature="verifyBeforeInvocations()" name="verifyBeforeInvocations" duration-ms="0" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
        <test-method status="PASS" signature="before2()" name="before2" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
      </class>
      <class name="test.dependent.MissingGroupTest">
        <test-method status="PASS" signature="methodSetUp()" name="methodSetUp" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
        <test-method status="PASS" signature="verifyThatExceptionIsThrownIfMissingGroup()" name="verifyThatExceptionIsThrownIfMissingGroup" duration-ms="3" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
      </class>
      <class name="test.dependent.DependentTest">
        <test-method status="PASS" signature="methodSetUp()" name="methodSetUp" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
        <test-method status="PASS" signature="dependentGroupsWithCycle()" name="dependentGroupsWithCycle" duration-ms="1" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
          <exception class="org.testng.TestNGException">
            <message>
              <![CDATA[
Cannot find class in classpath: test.dependent.SampleDependentMethods7]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.testng.TestNGException: 
Cannot find class in classpath: test.dependent.SampleDependentMethods7
	at org.testng.xml.XmlClass.loadClass(XmlClass.java:76)
	at org.testng.xml.XmlClass.init(XmlClass.java:68)
	at org.testng.xml.XmlClass.init(XmlClass.java:58)
	at org.testng.xml.XmlClass.<init>(XmlClass.java:34)
	at test.BaseTest.addClass(BaseTest.java:204)
	at test.dependent.DependentTest.dependentGroupsWithCycle(DependentTest.java:86)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:76)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:673)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:842)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1166)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
	at org.testng.TestRunner.runWorkers(TestRunner.java:1150)
	at org.testng.TestRunner.privateRun(TestRunner.java:752)
	at org.testng.TestRunner.run(TestRunner.java:603)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:329)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:324)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:286)
	at org.testng.SuiteRunner.run(SuiteRunner.java:235)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1049)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:974)
	at org.testng.TestNG.run(TestNG.java:905)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:74)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:93)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:101)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.apache.maven.surefire.booter.ProviderFactory$ClassLoaderProxy.invoke(ProviderFactory.java:103)
	at $Proxy0.invoke(Unknown Source)
	at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:145)
	at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcess(SurefireStarter.java:87)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:69)
]]>
            </full-stacktrace>
          </exception>
        </test-method>
        <test-method status="PASS" signature="dependentMethods()" name="dependentMethods" duration-ms="4" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
        <test-method status="PASS" signature="methodSetUp()" name="methodSetUp" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
        <test-method status="PASS" signature="dependentMethodsWithCycle()" name="dependentMethodsWithCycle" duration-ms="2" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
          <exception class="org.testng.TestNGException">
            <message>
              <![CDATA[
The following methods have cyclic dependencies:
test.dependent.SampleDependentMethods6.step2()
test.dependent.SampleDependentMethods6.step1()
]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.testng.TestNGException: 
The following methods have cyclic dependencies:
test.dependent.SampleDependentMethods6.step2()
test.dependent.SampleDependentMethods6.step1()

	at org.testng.internal.Graph.topologicalSort(Graph.java:150)
	at org.testng.internal.MethodHelper.topologicalSort(MethodHelper.java:266)
	at org.testng.internal.MethodHelper.sortMethods(MethodHelper.java:316)
	at org.testng.internal.MethodHelper.collectAndOrderMethods(MethodHelper.java:51)
	at org.testng.TestRunner.initMethods(TestRunner.java:467)
	at org.testng.TestRunner.init(TestRunner.java:228)
	at org.testng.TestRunner.init(TestRunner.java:198)
	at org.testng.TestRunner.<init>(TestRunner.java:154)
	at test.BaseTest$InternalTestRunnerFactory.newTestRunner(BaseTest.java:437)
	at org.testng.SuiteRunner$ProxyTestRunnerFactory.newTestRunner(SuiteRunner.java:556)
	at org.testng.SuiteRunner.init(SuiteRunner.java:154)
	at org.testng.SuiteRunner.<init>(SuiteRunner.java:108)
	at org.testng.SuiteRunner.<init>(SuiteRunner.java:93)
	at org.testng.SuiteRunner.<init>(SuiteRunner.java:84)
	at test.BaseTest.run(BaseTest.java:186)
	at test.dependent.DependentTest.dependentMethodsWithCycle(DependentTest.java:81)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:76)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:673)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:842)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1166)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
	at org.testng.TestRunner.runWorkers(TestRunner.java:1150)
	at org.testng.TestRunner.privateRun(TestRunner.java:752)
	at org.testng.TestRunner.run(TestRunner.java:603)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:329)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:324)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:286)
	at org.testng.SuiteRunner.run(SuiteRunner.java:235)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1049)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:974)
	at org.testng.TestNG.run(TestNG.java:905)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:74)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:93)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:101)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.apache.maven.surefire.booter.ProviderFactory$ClassLoaderProxy.invoke(ProviderFactory.java:103)
	at $Proxy0.invoke(Unknown Source)
	at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:145)
	at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcess(SurefireStarter.java:87)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:69)
]]>
            </full-stacktrace>
          </exception>
        </test-method>
        <test-method status="PASS" signature="methodSetUp()" name="methodSetUp" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
        <test-method status="PASS" signature="dependentMethodsWithNonExistentMethod()" name="dependentMethodsWithNonExistentMethod" duration-ms="1" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
          <exception class="org.testng.TestNGException">
            <message>
              <![CDATA[
test.dependent.SampleDependentMethods5.step2() depends on non-existent method blablabla]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.testng.TestNGException: 
test.dependent.SampleDependentMethods5.step2() depends on non-existent method blablabla
	at org.testng.internal.MethodHelper.findDependedUponMethods(MethodHelper.java:98)
	at org.testng.internal.MethodHelper.topologicalSort(MethodHelper.java:245)
	at org.testng.internal.MethodHelper.sortMethods(MethodHelper.java:316)
	at org.testng.internal.MethodHelper.collectAndOrderMethods(MethodHelper.java:51)
	at org.testng.TestRunner.initMethods(TestRunner.java:467)
	at org.testng.TestRunner.init(TestRunner.java:228)
	at org.testng.TestRunner.init(TestRunner.java:198)
	at org.testng.TestRunner.<init>(TestRunner.java:154)
	at test.BaseTest$InternalTestRunnerFactory.newTestRunner(BaseTest.java:437)
	at org.testng.SuiteRunner$ProxyTestRunnerFactory.newTestRunner(SuiteRunner.java:556)
	at org.testng.SuiteRunner.init(SuiteRunner.java:154)
	at org.testng.SuiteRunner.<init>(SuiteRunner.java:108)
	at org.testng.SuiteRunner.<init>(SuiteRunner.java:93)
	at org.testng.SuiteRunner.<init>(SuiteRunner.java:84)
	at test.BaseTest.run(BaseTest.java:186)
	at test.dependent.DependentTest.dependentMethodsWithNonExistentMethod(DependentTest.java:65)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:76)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:673)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:842)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1166)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
	at org.testng.TestRunner.runWorkers(TestRunner.java:1150)
	at org.testng.TestRunner.privateRun(TestRunner.java:752)
	at org.testng.TestRunner.run(TestRunner.java:603)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:329)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:324)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:286)
	at org.testng.SuiteRunner.run(SuiteRunner.java:235)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1049)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:974)
	at org.testng.TestNG.run(TestNG.java:905)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:74)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:93)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:101)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.apache.maven.surefire.booter.ProviderFactory$ClassLoaderProxy.invoke(ProviderFactory.java:103)
	at $Proxy0.invoke(Unknown Source)
	at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:145)
	at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcess(SurefireStarter.java:87)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:69)
]]>
            </full-stacktrace>
          </exception>
        </test-method>
        <test-method status="PASS" signature="methodSetUp()" name="methodSetUp" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
        <test-method status="PASS" signature="methodSetUp()" name="methodSetUp" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
        <test-method status="PASS" signature="dependentMethodsWithSkip()" name="dependentMethodsWithSkip" duration-ms="4" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
        <test-method status="PASS" signature="simpleSkip()" name="simpleSkip" duration-ms="3" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
        <test-method status="PASS" signature="methodSetUp()" name="methodSetUp" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
      </class>
      <class name="test.dependent.MissingMethodTest">
        <test-method status="PASS" signature="methodSetUp()" name="methodSetUp" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
        <test-method status="PASS" signature="verifyThatExceptionIsThrownIfMissingMethod()" name="verifyThatExceptionIsThrownIfMissingMethod" duration-ms="3" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
      </class>
      <class name="test.dependent.ClassDependsOnGroups">
        <test-method status="PASS" signature="verifyDependsOnGroups()" name="verifyDependsOnGroups" duration-ms="4" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
        <test-method status="PASS" signature="methodSetUp()" name="methodSetUp" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
      </class>
      <class name="test.dependent.DepBugSampleTest">
        <test-method status="PASS" signature="get()" name="get" duration-ms="0" started-at="2011-05-26T14:44:29Z" depends-on-methods="test.dependent.DepBugSampleTest.send" finished-at="2011-05-26T14:44:29Z">
        </test-method>
        <test-method status="PASS" signature="send()" name="send" duration-ms="0" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
        <test-method status="PASS" signature="setup()" name="setup" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
        <test-method status="PASS" signature="destroy()" name="destroy" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
        <test-method status="PASS" signature="list()" name="list" duration-ms="0" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
      </class>
      <class name="test.dependent.SampleDependentMethods">
        <test-method status="PASS" signature="oneB()" name="oneB" duration-ms="1" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
        <test-method status="PASS" signature="oneA()" name="oneA" duration-ms="0" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
        <test-method status="PASS" signature="secondA()" name="secondA" duration-ms="0" started-at="2011-05-26T14:44:29Z" depends-on-methods="test.dependent.SampleDependentMethods.oneB, test.dependent.SampleDependentMethods.oneA" finished-at="2011-05-26T14:44:29Z">
        </test-method>
        <test-method status="PASS" signature="thirdA()" name="thirdA" duration-ms="0" started-at="2011-05-26T14:44:29Z" depends-on-methods="test.dependent.SampleDependentMethods.secondA" finished-at="2011-05-26T14:44:29Z">
        </test-method>
        <test-method status="PASS" signature="tearDown()" name="tearDown" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
        <test-method status="PASS" signature="canBeRunAnytime()" name="canBeRunAnytime" duration-ms="0" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
      </class>
      <class name="test.dependent.DependentAlwaysRunTest">
        <test-method status="PASS" signature="verifyDependsOnGroups1AlwaysRun()" name="verifyDependsOnGroups1AlwaysRun" duration-ms="4" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
        <test-method status="PASS" signature="methodSetUp()" name="methodSetUp" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
        <test-method status="PASS" signature="methodSetUp()" name="methodSetUp" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
        <test-method status="PASS" signature="verifyDependsOnGroups2AlwaysRun()" name="verifyDependsOnGroups2AlwaysRun" duration-ms="4" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
        <test-method status="PASS" signature="verifyDependsOnMethodsAlwaysRun()" name="verifyDependsOnMethodsAlwaysRun" duration-ms="4" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
        <test-method status="PASS" signature="methodSetUp()" name="methodSetUp" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
      </class>
      <class name="test.dependent.DepBugVerifyTest">
        <test-method status="PASS" signature="verify()" name="verify" duration-ms="0" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
      </class>
      <class name="test.dependent.MultiGroupTest">
        <test-method status="PASS" signature="methodSetUp()" name="methodSetUp" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
        <test-method status="PASS" signature="verifyDependsOnMultiGroups()" name="verifyDependsOnMultiGroups" duration-ms="4" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
      </class>
      <class name="test.dependent.OrderMethodTest">
        <test-method status="PASS" signature="z_first0()" name="z_first0" duration-ms="1" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
        <test-method status="PASS" signature="third0()" name="third0" duration-ms="0" depends-on-groups="2.*" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
        <test-method status="PASS" signature="a_second0()" name="a_second0" duration-ms="0" depends-on-groups="1.0, 1.1" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
        <test-method status="PASS" signature="a_second1()" name="a_second1" duration-ms="0" depends-on-groups="1.0, 1.1" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
        <test-method status="PASS" signature="z_premiere1()" name="z_premiere1" duration-ms="0" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
      </class>
    </test>
    <test name="Test outer scope" duration-ms="0" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
      <class name="test.sample.Scope">
        <test-method status="PASS" signature="outerDeprecated(java.lang.String)" name="outerDeprecated" duration-ms="0" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[out]]>
              </value>
            </param>
          </params>
        </test-method>
      </class>
    </test>
    <test name="ConfigFailurePolicy" duration-ms="289" started-at="2011-05-26T14:44:45Z" finished-at="2011-05-26T14:44:45Z">
      <class name="test.configurationfailurepolicy.FailurePolicyTest">
        <test-method status="PASS" signature="commandLineTestWithXMLFile_policyAsContinue()" name="commandLineTestWithXMLFile_policyAsContinue" duration-ms="51" started-at="2011-05-26T14:44:45Z" finished-at="2011-05-26T14:44:45Z">
        </test-method>
        <test-method status="PASS" signature="commandLineTestWithXMLFile_policyAsSkip()" name="commandLineTestWithXMLFile_policyAsSkip" duration-ms="22" started-at="2011-05-26T14:44:45Z" finished-at="2011-05-26T14:44:45Z">
        </test-method>
        <test-method status="PASS" signature="commandLineTest_policyAsContinue()" name="commandLineTest_policyAsContinue" duration-ms="22" started-at="2011-05-26T14:44:45Z" finished-at="2011-05-26T14:44:45Z">
        </test-method>
        <test-method status="PASS" signature="commandLineTest_policyAsSkip()" name="commandLineTest_policyAsSkip" duration-ms="17" started-at="2011-05-26T14:44:45Z" finished-at="2011-05-26T14:44:45Z">
        </test-method>
        <test-method status="PASS" signature="confFailureTest([Ljava.lang.Class;, int, int, int)" name="confFailureTest" duration-ms="14" started-at="2011-05-26T14:44:45Z" finished-at="2011-05-26T14:44:45Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Class;@876800e]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="confFailureTest([Ljava.lang.Class;, int, int, int)" name="confFailureTest" duration-ms="16" started-at="2011-05-26T14:44:45Z" finished-at="2011-05-26T14:44:45Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Class;@1bd11b79]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="confFailureTest([Ljava.lang.Class;, int, int, int)" name="confFailureTest" duration-ms="29" started-at="2011-05-26T14:44:45Z" finished-at="2011-05-26T14:44:45Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Class;@3d62b333]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="confFailureTest([Ljava.lang.Class;, int, int, int)" name="confFailureTest" duration-ms="17" started-at="2011-05-26T14:44:45Z" finished-at="2011-05-26T14:44:45Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Class;@1ae2f8c1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="confFailureTest([Ljava.lang.Class;, int, int, int)" name="confFailureTest" duration-ms="19" started-at="2011-05-26T14:44:45Z" finished-at="2011-05-26T14:44:45Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Class;@2b3954b1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="confFailureTest([Ljava.lang.Class;, int, int, int)" name="confFailureTest" duration-ms="21" started-at="2011-05-26T14:44:45Z" finished-at="2011-05-26T14:44:45Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Class;@40e746a2]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="confFailureTest([Ljava.lang.Class;, int, int, int)" name="confFailureTest" duration-ms="13" started-at="2011-05-26T14:44:45Z" finished-at="2011-05-26T14:44:45Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Class;@fce56f8]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="confFailureTest([Ljava.lang.Class;, int, int, int)" name="confFailureTest" duration-ms="19" started-at="2011-05-26T14:44:45Z" finished-at="2011-05-26T14:44:45Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Class;@33afbbe3]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="confFailureTest([Ljava.lang.Class;, int, int, int)" name="confFailureTest" duration-ms="20" started-at="2011-05-26T14:44:45Z" finished-at="2011-05-26T14:44:45Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Ljava.lang.Class;@56584e97]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
          </params>
        </test-method>
      </class>
    </test>
    <test name="YAML" duration-ms="127" started-at="2011-05-26T14:44:45Z" finished-at="2011-05-26T14:44:45Z">
      <class name="test.yaml.YamlTest">
        <test-method status="PASS" signature="compareFiles(java.lang.String)" name="compareFiles" duration-ms="94" started-at="2011-05-26T14:44:45Z" finished-at="2011-05-26T14:44:45Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[a1]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="compareFiles(java.lang.String)" name="compareFiles" duration-ms="16" started-at="2011-05-26T14:44:45Z" finished-at="2011-05-26T14:44:45Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[a2]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="compareFiles(java.lang.String)" name="compareFiles" duration-ms="11" started-at="2011-05-26T14:44:45Z" finished-at="2011-05-26T14:44:45Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[a3]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="compareFiles(java.lang.String)" name="compareFiles" duration-ms="5" started-at="2011-05-26T14:44:45Z" finished-at="2011-05-26T14:44:45Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[a4]]>
              </value>
            </param>
          </params>
        </test-method>
      </class>
      <class name="test.configuration.ConfigurationTest">
        <test-method status="PASS" signature="afterSuite()" name="afterSuite" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:45Z" finished-at="2011-05-26T14:44:45Z">
        </test-method>
        <test-method status="PASS" signature="afterSuite()" name="afterSuite" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:45Z" finished-at="2011-05-26T14:44:45Z">
        </test-method>
        <test-method status="PASS" signature="cleanUp()" name="cleanUp" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:45Z" finished-at="2011-05-26T14:44:45Z">
        </test-method>
        <test-method status="PASS" signature="verify()" name="verify" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:45Z" finished-at="2011-05-26T14:44:45Z">
        </test-method>
        <test-method status="PASS" signature="afterSuite()" name="afterSuite" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:45Z" finished-at="2011-05-26T14:44:45Z">
        </test-method>
        <test-method status="PASS" signature="incrementAfter()" name="incrementAfter" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:45Z" finished-at="2011-05-26T14:44:45Z">
        </test-method>
        <test-method status="PASS" signature="afterSuite()" name="afterSuite" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:45Z" finished-at="2011-05-26T14:44:45Z">
        </test-method>
        <test-method status="PASS" signature="cleanUp()" name="cleanUp" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:45Z" finished-at="2011-05-26T14:44:45Z">
        </test-method>
      </class>
      <class name="test.configuration.SuiteTest">
        <test-method status="PASS" signature="beforeSuiteParent()" name="beforeSuiteParent" is-config="true" duration-ms="1" started-at="2011-05-26T14:44:20Z" finished-at="2011-05-26T14:44:20Z">
        </test-method>
        <test-method status="PASS" signature="beforeSuite()" name="beforeSuite" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:20Z" finished-at="2011-05-26T14:44:20Z">
        </test-method>
        <test-method status="PASS" signature="beforeSuite()" name="beforeSuite" is-config="true" duration-ms="1" started-at="2011-05-26T14:44:20Z" finished-at="2011-05-26T14:44:20Z">
        </test-method>
        <test-method status="PASS" signature="beforeSuiteChild()" name="beforeSuiteChild" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:20Z" depends-on-methods="test.configuration.BaseSuiteTest.beforeSuiteParent" finished-at="2011-05-26T14:44:20Z">
        </test-method>
        <test-method status="PASS" signature="beforeSuite()" name="beforeSuite" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:20Z" finished-at="2011-05-26T14:44:20Z">
        </test-method>
        <test-method status="PASS" signature="init()" name="init" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:20Z" finished-at="2011-05-26T14:44:20Z">
        </test-method>
        <test-method status="PASS" signature="setUpSuite()" name="setUpSuite" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:20Z" finished-at="2011-05-26T14:44:20Z">
        </test-method>
        <test-method status="PASS" signature="incrementBefore()" name="incrementBefore" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:20Z" finished-at="2011-05-26T14:44:20Z">
        </test-method>
        <test-method status="PASS" signature="init()" name="init" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:20Z" finished-at="2011-05-26T14:44:20Z">
        </test-method>
        <test-method status="PASS" signature="beforeSuite()" name="beforeSuite" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:20Z" finished-at="2011-05-26T14:44:20Z">
        </test-method>
        <test-method status="PASS" signature="init()" name="init" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:20Z" finished-at="2011-05-26T14:44:20Z">
        </test-method>
      </class>
    </test>
    <test name="Nested2" duration-ms="0" started-at="2011-05-26T14:44:45Z" finished-at="2011-05-26T14:44:45Z">
      <class name="test.nested2.TmpA$NestedAWithTest">
        <test-method status="PASS" signature="nestedA()" name="nestedA" duration-ms="0" started-at="2011-05-26T14:44:45Z" finished-at="2011-05-26T14:44:45Z">
        </test-method>
      </class>
      <class name="test.nested2.TmpA$NestedAWithInheritedTest">
        <test-method status="PASS" signature="nestedWithInheritedTest()" name="nestedWithInheritedTest" duration-ms="0" started-at="2011-05-26T14:44:45Z" finished-at="2011-05-26T14:44:45Z">
        </test-method>
      </class>
    </test>
    <test name="Asserts" duration-ms="4" started-at="2011-05-26T14:44:45Z" finished-at="2011-05-26T14:44:45Z">
      <class name="org.testng.AssertTest">
        <test-method status="PASS" signature="assertEqualsMapShouldFail()" name="assertEqualsMapShouldFail" duration-ms="1" started-at="2011-05-26T14:44:45Z" finished-at="2011-05-26T14:44:45Z">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Maps do not have the same size:1 != 2]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Maps do not have the same size:1 != 2
	at org.testng.Assert.fail(Assert.java:89)
	at org.testng.Assert.assertEquals(Assert.java:711)
	at org.testng.AssertTest.assertEqualsMapShouldFail(AssertTest.java:116)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:76)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:673)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:842)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1166)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
	at org.testng.TestRunner.runWorkers(TestRunner.java:1150)
	at org.testng.TestRunner.privateRun(TestRunner.java:752)
	at org.testng.TestRunner.run(TestRunner.java:603)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:329)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:324)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:286)
	at org.testng.SuiteRunner.run(SuiteRunner.java:235)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1049)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:974)
	at org.testng.TestNG.run(TestNG.java:905)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:74)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:93)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:101)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.apache.maven.surefire.booter.ProviderFactory$ClassLoaderProxy.invoke(ProviderFactory.java:103)
	at $Proxy0.invoke(Unknown Source)
	at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:145)
	at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcess(SurefireStarter.java:87)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:69)
]]>
            </full-stacktrace>
          </exception>
        </test-method>
        <test-method status="PASS" signature="mapAssertEquals()" name="mapAssertEquals" duration-ms="0" started-at="2011-05-26T14:44:45Z" finished-at="2011-05-26T14:44:45Z">
        </test-method>
        <test-method status="PASS" signature="nullMapAssertEquals()" name="nullMapAssertEquals" duration-ms="0" started-at="2011-05-26T14:44:45Z" finished-at="2011-05-26T14:44:45Z">
        </test-method>
        <test-method status="PASS" signature="nullCollectionAssertEquals()" name="nullCollectionAssertEquals" duration-ms="0" started-at="2011-05-26T14:44:45Z" finished-at="2011-05-26T14:44:45Z">
        </test-method>
        <test-method status="PASS" signature="oneNullMapAssertEquals()" name="oneNullMapAssertEquals" duration-ms="0" started-at="2011-05-26T14:44:45Z" finished-at="2011-05-26T14:44:45Z">
        </test-method>
        <test-method status="PASS" signature="nullSetAssertEquals()" name="nullSetAssertEquals" duration-ms="0" started-at="2011-05-26T14:44:45Z" finished-at="2011-05-26T14:44:45Z">
        </test-method>
        <test-method status="PASS" signature="setAssertEquals()" name="setAssertEquals" duration-ms="0" started-at="2011-05-26T14:44:45Z" finished-at="2011-05-26T14:44:45Z">
        </test-method>
        <test-method status="PASS" signature="oneNullSetAssertEquals()" name="oneNullSetAssertEquals" duration-ms="0" started-at="2011-05-26T14:44:45Z" finished-at="2011-05-26T14:44:45Z">
        </test-method>
        <test-method status="PASS" signature="nullObjectArrayAssertNoOrder()" name="nullObjectArrayAssertNoOrder" duration-ms="0" started-at="2011-05-26T14:44:45Z" finished-at="2011-05-26T14:44:45Z">
        </test-method>
        <test-method status="PASS" signature="nullObjectArrayAssertEquals()" name="nullObjectArrayAssertEquals" duration-ms="0" started-at="2011-05-26T14:44:45Z" finished-at="2011-05-26T14:44:45Z">
        </test-method>
      </class>
      <class name="test.asserttests.AssertTest">
        <test-method status="PASS" signature="arraysFailures_1()" name="arraysFailures_1" duration-ms="0" started-at="2011-05-26T14:44:45Z" finished-at="2011-05-26T14:44:45Z">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[ expected:<[J@9ba0281> but was:<[I@12fa6824>]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError:  expected:<[J@9ba0281> but was:<[I@12fa6824>
	at org.testng.Assert.fail(Assert.java:89)
	at org.testng.Assert.failNotEquals(Assert.java:489)
	at org.testng.Assert.assertArrayEquals(Assert.java:139)
	at org.testng.Assert.assertEquals(Assert.java:112)
	at org.testng.Assert.assertEquals(Assert.java:160)
	at test.asserttests.AssertTest.arraysFailures_1(AssertTest.java:44)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:76)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:673)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:842)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1166)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
	at org.testng.TestRunner.runWorkers(TestRunner.java:1150)
	at org.testng.TestRunner.privateRun(TestRunner.java:752)
	at org.testng.TestRunner.run(TestRunner.java:603)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:329)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:324)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:286)
	at org.testng.SuiteRunner.run(SuiteRunner.java:235)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1049)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:974)
	at org.testng.TestNG.run(TestNG.java:905)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:74)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:93)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:101)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.apache.maven.surefire.booter.ProviderFactory$ClassLoaderProxy.invoke(ProviderFactory.java:103)
	at $Proxy0.invoke(Unknown Source)
	at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:145)
	at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcess(SurefireStarter.java:87)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:69)
]]>
            </full-stacktrace>
          </exception>
        </test-method>
        <test-method status="PASS" signature="arraysFailures_2()" name="arraysFailures_2" duration-ms="0" started-at="2011-05-26T14:44:45Z" finished-at="2011-05-26T14:44:45Z">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected:<1> but was:<[I@69eb424b>]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected:<1> but was:<[I@69eb424b>
	at org.testng.Assert.fail(Assert.java:89)
	at org.testng.Assert.failNotEquals(Assert.java:489)
	at org.testng.Assert.assertEquals(Assert.java:118)
	at org.testng.Assert.assertEquals(Assert.java:160)
	at test.asserttests.AssertTest.arraysFailures_2(AssertTest.java:50)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:76)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:673)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:842)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1166)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
	at org.testng.TestRunner.runWorkers(TestRunner.java:1150)
	at org.testng.TestRunner.privateRun(TestRunner.java:752)
	at org.testng.TestRunner.run(TestRunner.java:603)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:329)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:324)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:286)
	at org.testng.SuiteRunner.run(SuiteRunner.java:235)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1049)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:974)
	at org.testng.TestNG.run(TestNG.java:905)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:74)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:93)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:101)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.apache.maven.surefire.booter.ProviderFactory$ClassLoaderProxy.invoke(ProviderFactory.java:103)
	at $Proxy0.invoke(Unknown Source)
	at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:145)
	at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcess(SurefireStarter.java:87)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:69)
]]>
            </full-stacktrace>
          </exception>
        </test-method>
        <test-method status="PASS" signature="noOrderFailure()" name="noOrderFailure" duration-ms="0" started-at="2011-05-26T14:44:45Z" finished-at="2011-05-26T14:44:45Z">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Arrays not equal: [a, b, b] and [a, a, b]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Arrays not equal: [a, b, b] and [a, a, b]
	at org.testng.Assert.fail(Assert.java:89)
	at org.testng.Assert.failAssertNoEqual(Assert.java:612)
	at org.testng.Assert.assertEqualsNoOrder(Assert.java:602)
	at org.testng.Assert.assertEqualsNoOrder(Assert.java:636)
	at test.asserttests.AssertTest.noOrderFailure(AssertTest.java:22)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:76)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:673)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:842)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1166)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
	at org.testng.TestRunner.runWorkers(TestRunner.java:1150)
	at org.testng.TestRunner.privateRun(TestRunner.java:752)
	at org.testng.TestRunner.run(TestRunner.java:603)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:329)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:324)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:286)
	at org.testng.SuiteRunner.run(SuiteRunner.java:235)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1049)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:974)
	at org.testng.TestNG.run(TestNG.java:905)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:74)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:93)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:101)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.apache.maven.surefire.booter.ProviderFactory$ClassLoaderProxy.invoke(ProviderFactory.java:103)
	at $Proxy0.invoke(Unknown Source)
	at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:145)
	at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcess(SurefireStarter.java:87)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:69)
]]>
            </full-stacktrace>
          </exception>
        </test-method>
        <test-method status="PASS" signature="int_Integer_Arrays()" name="int_Integer_Arrays" duration-ms="0" started-at="2011-05-26T14:44:45Z" finished-at="2011-05-26T14:44:45Z">
        </test-method>
        <test-method status="PASS" signature="intArray_Issue4()" name="intArray_Issue4" duration-ms="0" started-at="2011-05-26T14:44:45Z" finished-at="2011-05-26T14:44:45Z">
        </test-method>
        <test-method status="PASS" signature="arraysFailures_3()" name="arraysFailures_3" duration-ms="0" started-at="2011-05-26T14:44:45Z" finished-at="2011-05-26T14:44:45Z">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected:<[J@2c1f14fd> but was:<1>]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected:<[J@2c1f14fd> but was:<1>
	at org.testng.Assert.fail(Assert.java:89)
	at org.testng.Assert.failNotEquals(Assert.java:489)
	at org.testng.Assert.assertArrayEquals(Assert.java:150)
	at org.testng.Assert.assertEquals(Assert.java:112)
	at org.testng.Assert.assertEquals(Assert.java:160)
	at test.asserttests.AssertTest.arraysFailures_3(AssertTest.java:56)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:76)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:673)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:842)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1166)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
	at org.testng.TestRunner.runWorkers(TestRunner.java:1150)
	at org.testng.TestRunner.privateRun(TestRunner.java:752)
	at org.testng.TestRunner.run(TestRunner.java:603)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:329)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:324)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:286)
	at org.testng.SuiteRunner.run(SuiteRunner.java:235)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1049)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:974)
	at org.testng.TestNG.run(TestNG.java:905)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:74)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:93)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:101)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.apache.maven.surefire.booter.ProviderFactory$ClassLoaderProxy.invoke(ProviderFactory.java:103)
	at $Proxy0.invoke(Unknown Source)
	at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:145)
	at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcess(SurefireStarter.java:87)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:69)
]]>
            </full-stacktrace>
          </exception>
        </test-method>
        <test-method status="PASS" signature="noOrderSuccess()" name="noOrderSuccess" duration-ms="1" started-at="2011-05-26T14:44:45Z" finished-at="2011-05-26T14:44:45Z">
        </test-method>
        <test-method status="PASS" signature="setsSuccess()" name="setsSuccess" duration-ms="0" started-at="2011-05-26T14:44:45Z" finished-at="2011-05-26T14:44:45Z">
        </test-method>
      </class>
    </test>
    <test name="Nopackage" duration-ms="14" started-at="2011-05-26T14:44:20Z" finished-at="2011-05-26T14:44:20Z">
      <class name="NoPackageTest">
        <test-method status="PASS" signature="test()" name="test" duration-ms="0" started-at="2011-05-26T14:44:20Z" finished-at="2011-05-26T14:44:20Z">
        </test-method>
        <test-method status="PASS" signature="after()" name="after" is-config="true" duration-ms="1" started-at="2011-05-26T14:44:20Z" finished-at="2011-05-26T14:44:20Z">
        </test-method>
      </class>
    </test>
    <test name="Test order invocation" duration-ms="21" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
      <class name="test.interleavedorder.InterleavedInvocationTest">
        <test-method status="PASS" signature="beforeTest()" name="beforeTest" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
        </test-method>
        <test-method status="PASS" signature="methodSetUp()" name="methodSetUp" is-config="true" duration-ms="1" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
        </test-method>
        <test-method status="PASS" signature="invocationOrder()" name="invocationOrder" duration-ms="20" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
        </test-method>
      </class>
    </test>
    <test name="Object factory" duration-ms="74" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
      <class name="test.objectfactory.CombinedTestAndObjectFactoryTest">
        <test-method status="PASS" signature="methodSetUp()" name="methodSetUp" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
        </test-method>
        <test-method status="PASS" signature="combinedTestAndObjectFactory()" name="combinedTestAndObjectFactory" duration-ms="3" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
        </test-method>
      </class>
      <class name="test.objectfactory.CustomFactoryTest">
        <test-method status="PASS" signature="factoryReceivesContext()" name="factoryReceivesContext" duration-ms="34" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
        </test-method>
        <test-method status="PASS" signature="resetCount()" name="resetCount" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
        </test-method>
        <test-method status="PASS" signature="setFactoryOnSuite()" name="setFactoryOnSuite" duration-ms="7" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
        </test-method>
        <test-method status="PASS" signature="resetCount()" name="resetCount" is-config="true" duration-ms="1" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
        </test-method>
        <test-method status="PASS" signature="setFactoryOnTestNG()" name="setFactoryOnTestNG" duration-ms="10" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
        </test-method>
        <test-method status="PASS" signature="resetCount()" name="resetCount" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
        </test-method>
        <test-method status="PASS" signature="setInvalidMethodFactoryByAnnotation()" name="setInvalidMethodFactoryByAnnotation" duration-ms="0" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
          <exception class="org.testng.TestNGException">
            <message>
              <![CDATA[
Return type of public java.lang.Object test.objectfactory.BadMethodFactoryFactory.create() is not IObjectFactory]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.testng.TestNGException: 
Return type of public java.lang.Object test.objectfactory.BadMethodFactoryFactory.create() is not IObjectFactory
	at org.testng.internal.TestNGClassFinder.<init>(TestNGClassFinder.java:65)
	at org.testng.TestRunner.initMethods(TestRunner.java:397)
	at org.testng.TestRunner.init(TestRunner.java:228)
	at org.testng.TestRunner.init(TestRunner.java:198)
	at org.testng.TestRunner.<init>(TestRunner.java:147)
	at org.testng.SuiteRunner$DefaultTestRunnerFactory.newTestRunner(SuiteRunner.java:520)
	at org.testng.SuiteRunner.init(SuiteRunner.java:154)
	at org.testng.SuiteRunner.<init>(SuiteRunner.java:108)
	at org.testng.TestNG.createSuiteRunner(TestNG.java:1126)
	at org.testng.TestNG.createSuiteRunners(TestNG.java:1113)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:965)
	at org.testng.TestNG.run(TestNG.java:905)
	at test.objectfactory.CustomFactoryTest.setInvalidMethodFactoryByAnnotation(CustomFactoryTest.java:67)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:76)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:673)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:842)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1166)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
	at org.testng.TestRunner.runWorkers(TestRunner.java:1150)
	at org.testng.TestRunner.privateRun(TestRunner.java:752)
	at org.testng.TestRunner.run(TestRunner.java:603)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:329)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:324)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:286)
	at org.testng.SuiteRunner.run(SuiteRunner.java:235)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1049)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:974)
	at org.testng.TestNG.run(TestNG.java:905)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:74)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:93)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:101)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.apache.maven.surefire.booter.ProviderFactory$ClassLoaderProxy.invoke(ProviderFactory.java:103)
	at $Proxy0.invoke(Unknown Source)
	at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:145)
	at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcess(SurefireStarter.java:87)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:69)
]]>
            </full-stacktrace>
          </exception>
        </test-method>
        <test-method status="PASS" signature="resetCount()" name="resetCount" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
        </test-method>
      </class>
      <class name="test.objectfactory.ObjectFactory2Test">
        <test-method status="PASS" signature="factoryOnSuiteShouldWork()" name="factoryOnSuiteShouldWork" duration-ms="8" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
        </test-method>
        <test-method status="PASS" signature="factoryOnTestNGShouldWork()" name="factoryOnTestNGShouldWork" duration-ms="8" started-at="2011-05-26T14:44:41Z" finished-at="2011-05-26T14:44:41Z">
        </test-method>
      </class>
    </test>
    <test name="BeforeMethod" duration-ms="6" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
      <class name="test.configuration.BeforeMethodTest">
        <test-method status="PASS" signature="before(java.lang.reflect.Method, org.testng.ITestContext)" name="before" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void test.configuration.BeforeMethodTest.mainTest()]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[org.testng.TestRunner@4965391b]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="mainTest()" name="mainTest" duration-ms="0" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
      </class>
    </test>
    <test name="Basic" duration-ms="5" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
      <class name="test.sample.Basic2">
        <test-method status="PASS" signature="basic2()" name="basic2" duration-ms="0" depends-on-groups="basic1" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
        <test-method status="PASS" signature="checkTestAtClassLevelWasRun()" name="checkTestAtClassLevelWasRun" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
        <test-method status="PASS" signature="cleanUp()" name="cleanUp" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
      </class>
      <class name="test.sample.Basic1">
        <test-method status="PASS" signature="beforeTestMethod()" name="beforeTestMethod" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
        <test-method status="PASS" signature="basic1()" name="basic1" duration-ms="0" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
      </class>
      <class name="test.Misc">
        <test-method status="PASS" signature="methodSetUp()" name="methodSetUp" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
        <test-method status="PASS" signature="makeSureSetUpWithParameterWithNoParametersFails()" name="makeSureSetUpWithParameterWithNoParametersFails" duration-ms="3" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
      </class>
    </test>
    <test name="SkipExceptions" duration-ms="6" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:44Z">
      <class name="test.skipex.SkippedExceptionTest">
        <test-method status="PASS" signature="skippedExceptionInConfigurationMethods()" name="skippedExceptionInConfigurationMethods" duration-ms="2" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:44Z">
        </test-method>
        <test-method status="PASS" signature="skippedExceptionInTestMethods()" name="skippedExceptionInTestMethods" duration-ms="4" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:44Z">
        </test-method>
      </class>
    </test>
    <test name="Test class groups 1" duration-ms="0" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
      <class name="test.classgroup.Second">
        <test-method status="PASS" signature="verify()" name="verify" duration-ms="0" depends-on-groups="first" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
      </class>
      <class name="test.classgroup.First">
        <test-method status="PASS" signature="first1()" name="first1" duration-ms="0" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
        <test-method status="PASS" signature="first2()" name="first2" duration-ms="0" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
      </class>
    </test>
    <test name="UniqueSuite" duration-ms="15" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:44Z">
      <class name="test.uniquesuite.TestBefore1">
        <test-method status="PASS" signature="verify()" name="verify" duration-ms="0" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:44Z">
        </test-method>
      </class>
      <class name="test.uniquesuite.TestBefore2">
        <test-method status="PASS" signature="verify()" name="verify" duration-ms="0" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:44Z">
        </test-method>
      </class>
      <class name="test.uniquesuite.TestAfter">
        <test-method status="PASS" signature="testAfter()" name="testAfter" duration-ms="14" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:44Z">
        </test-method>
        <test-method status="PASS" signature="afterTest()" name="afterTest" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:44Z" finished-at="2011-05-26T14:44:44Z">
        </test-method>
      </class>
    </test>
    <test name="TimeOut" duration-ms="11323" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:41Z">
      <class name="test.timeout.TimeOutFromXmlTest">
        <test-method status="PASS" signature="noTimeOut()" name="noTimeOut" duration-ms="2005" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:31Z">
        </test-method>
        <test-method status="PASS" signature="methodSetUp()" name="methodSetUp" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
        <test-method status="PASS" signature="timeOutOnSuiteTag()" name="timeOutOnSuiteTag" duration-ms="1006" started-at="2011-05-26T14:44:31Z" finished-at="2011-05-26T14:44:32Z">
        </test-method>
        <test-method status="PASS" signature="methodSetUp()" name="methodSetUp" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:31Z" finished-at="2011-05-26T14:44:31Z">
        </test-method>
        <test-method status="PASS" signature="methodSetUp()" name="methodSetUp" is-config="true" duration-ms="1" started-at="2011-05-26T14:44:32Z" finished-at="2011-05-26T14:44:32Z">
        </test-method>
        <test-method status="PASS" signature="timeOutOnTestTag()" name="timeOutOnTestTag" duration-ms="1005" started-at="2011-05-26T14:44:32Z" finished-at="2011-05-26T14:44:33Z">
        </test-method>
        <test-method status="PASS" signature="methodSetUp()" name="methodSetUp" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:33Z" finished-at="2011-05-26T14:44:33Z">
        </test-method>
        <test-method status="PASS" signature="twoDifferentTests()" name="twoDifferentTests" duration-ms="3022" started-at="2011-05-26T14:44:33Z" finished-at="2011-05-26T14:44:36Z">
        </test-method>
      </class>
      <class name="test.timeout.TimeOutTest">
        <test-method status="PASS" signature="methodSetUp()" name="methodSetUp" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:36Z" finished-at="2011-05-26T14:44:36Z">
        </test-method>
        <test-method status="PASS" signature="timeOutInNonParallel()" name="timeOutInNonParallel" duration-ms="1010" started-at="2011-05-26T14:44:36Z" finished-at="2011-05-26T14:44:37Z">
        </test-method>
        <test-method status="PASS" signature="timeOutInParallel()" name="timeOutInParallel" duration-ms="1015" started-at="2011-05-26T14:44:37Z" finished-at="2011-05-26T14:44:38Z">
        </test-method>
        <test-method status="PASS" signature="methodSetUp()" name="methodSetUp" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:37Z" finished-at="2011-05-26T14:44:37Z">
        </test-method>
        <test-method status="PASS" signature="methodSetUp()" name="methodSetUp" is-config="true" duration-ms="0" started-at="2011-05-26T14:44:38Z" finished-at="2011-05-26T14:44:38Z">
        </test-method>
        <test-method status="PASS" signature="verifyInvocationTimeOut()" name="verifyInvocationTimeOut" duration-ms="2258" started-at="2011-05-26T14:44:38Z" finished-at="2011-05-26T14:44:41Z">
        </test-method>
      </class>
    </test>
    <test name="Test class groups 2" duration-ms="1" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
      <class name="test.classgroup.Second">
        <test-method status="PASS" signature="verify()" name="verify" duration-ms="0" depends-on-groups="first" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
      </class>
      <class name="test.classgroup.First">
        <test-method status="PASS" signature="first1()" name="first1" duration-ms="0" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
        <test-method status="PASS" signature="first2()" name="first2" duration-ms="0" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
        </test-method>
      </class>
    </test>
    <test name="CheckTrianglePost" duration-ms="0" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
      <class name="test.triangle.CheckCount">
        <test-method status="PASS" signature="testCheckCount(java.lang.String)" name="testCheckCount" duration-ms="0" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="testCheckCountDeprecated(java.lang.String)" name="testCheckCountDeprecated" duration-ms="0" started-at="2011-05-26T14:44:29Z" finished-at="2011-05-26T14:44:29Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
          </params>
        </test-method>
      </class>
    </test>
  </suite>
</testng-results>
